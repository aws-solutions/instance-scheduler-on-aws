// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InstanceSchedulerChinaStack snapshot test 1`] = `
{
  "Conditions": {
    "AnonymizedMetricsEnabled": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "Send",
            "AnonymousUsage",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "CreateRdsSnapshotCondition": {
      "Fn::Equals": [
        {
          "Ref": "CreateRdsSnapshot",
        },
        "Yes",
      ],
    },
    "EnableRdsClusterSchedulingCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableRdsClusterScheduling",
        },
        "Enabled",
      ],
    },
    "EnableSSMMaintenanceWindowsCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableSSMMaintenanceWindows",
        },
        "Yes",
      ],
    },
    "OpsMonitoringCondition": {
      "Fn::Equals": [
        {
          "Ref": "OpsMonitoring",
        },
        "Enabled",
      ],
    },
    "ScheduleASGsCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleASGs",
        },
        "Enabled",
      ],
    },
    "ScheduleDocDbCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleDocDb",
        },
        "Enabled",
      ],
    },
    "ScheduleEC2Condition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleEC2",
        },
        "Enabled",
      ],
    },
    "ScheduleLambdaAccountCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleLambdaAccount",
        },
        "Yes",
      ],
    },
    "ScheduleNeptuneCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleNeptune",
        },
        "Enabled",
      ],
    },
    "ScheduleRdsCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleRds",
        },
        "Enabled",
      ],
    },
    "SchedulerRolekmsAccessCondition93ED0C6C": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "KmsKeyArns",
                },
              ],
            },
            "",
          ],
        },
      ],
    },
    "SchedulingActiveCondition": {
      "Fn::Equals": [
        {
          "Ref": "SchedulingActive",
        },
        "Yes",
      ],
    },
    "TraceCondition": {
      "Fn::Equals": [
        {
          "Ref": "Trace",
        },
        "Yes",
      ],
    },
    "UsingAWSOrganizationsCondition": {
      "Fn::Equals": [
        {
          "Ref": "UsingAWSOrganizations",
        },
        "Yes",
      ],
    },
    "ddbDeletionProtectionCondition": {
      "Fn::Equals": [
        {
          "Ref": "ddbDeletionProtection",
        },
        "Enabled",
      ],
    },
  },
  "Mappings": {
    "CronExpressionsForSchedulingIntervals": {
      "IntervalMinutesToCron": {
        "1": "cron(0/1 * * * ? *)",
        "10": "cron(0/10 * * * ? *)",
        "15": "cron(0/15 * * * ? *)",
        "2": "cron(0/2 * * * ? *)",
        "30": "cron(0/30 * * * ? *)",
        "5": "cron(0/5 * * * ? *)",
        "60": "cron(0 0/1 * * ? *)",
      },
    },
    "MetricsSchedulingIntervalToSeconds": {
      "MinutesToSeconds": {
        "1": "60",
        "10": "600",
        "15": "900",
        "2": "120",
        "30": "1800",
        "5": "300",
        "60": "3600",
      },
    },
    "Send": {
      "AnonymousUsage": {
        "Data": "Yes",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Scheduler (v9.9.9)",
          },
          "Parameters": [
            "TagName",
            "SchedulerFrequency",
            "DefaultTimezone",
            "SchedulingActive",
          ],
        },
        {
          "Label": {
            "default": "Services",
          },
          "Parameters": [
            "ScheduleEC2",
            "ScheduleRds",
            "EnableRdsClusterScheduling",
            "ScheduleNeptune",
            "ScheduleDocDb",
            "ScheduleASGs",
          ],
        },
        {
          "Label": {
            "default": "Tagging",
          },
          "Parameters": [
            "StartedTags",
            "StoppedTags",
          ],
        },
        {
          "Label": {
            "default": "Service-specific",
          },
          "Parameters": [
            "EnableSSMMaintenanceWindows",
            "KmsKeyArns",
            "CreateRdsSnapshot",
            "AsgScheduledTagKey",
            "AsgRulePrefix",
          ],
        },
        {
          "Label": {
            "default": "Account structure",
          },
          "Parameters": [
            "UsingAWSOrganizations",
            "Namespace",
            "Principals",
            "Regions",
            "ScheduleLambdaAccount",
          ],
        },
        {
          "Label": {
            "default": "Monitoring",
          },
          "Parameters": [
            "LogRetentionDays",
            "Trace",
            "OpsMonitoring",
          ],
        },
        {
          "Label": {
            "default": "Other",
          },
          "Parameters": [
            "MemorySize",
            "AsgMemorySize",
            "OrchestratorMemorySize",
            "ddbDeletionProtection",
          ],
        },
      ],
      "ParameterLabels": {
        "AsgMemorySize": {
          "default": "AsgHandler Memory size (MB)",
        },
        "AsgRulePrefix": {
          "default": "ASG action name prefix",
        },
        "AsgScheduledTagKey": {
          "default": "ASG scheduled tag key",
        },
        "CreateRdsSnapshot": {
          "default": "Create RDS instance snapshots on stop",
        },
        "DefaultTimezone": {
          "default": "Default time zone",
        },
        "EnableRdsClusterScheduling": {
          "default": "Enable RDS cluster scheduling",
        },
        "EnableSSMMaintenanceWindows": {
          "default": "Enable EC2 SSM Maintenance Windows",
        },
        "KmsKeyArns": {
          "default": "Kms Key Arns for EC2",
        },
        "LogRetentionDays": {
          "default": "Log retention period (days)",
        },
        "MemorySize": {
          "default": "SchedulingRequestHandler Memory size (MB)",
        },
        "Namespace": {
          "default": "Namespace",
        },
        "OpsMonitoring": {
          "default": "Operational Monitoring",
        },
        "OrchestratorMemorySize": {
          "default": "Orchestrator Memory size (MB)",
        },
        "Principals": {
          "default": "Organization ID/remote account IDs",
        },
        "Regions": {
          "default": "Region(s)",
        },
        "ScheduleASGs": {
          "default": "Enable AutoScaling Group scheduling",
        },
        "ScheduleDocDb": {
          "default": "Enable DocumentDB cluster scheduling",
        },
        "ScheduleEC2": {
          "default": "Enable EC2 scheduling",
        },
        "ScheduleLambdaAccount": {
          "default": "Enable hub account scheduling",
        },
        "ScheduleNeptune": {
          "default": "Enable Neptune cluster scheduling",
        },
        "ScheduleRds": {
          "default": "Enable RDS instance scheduling",
        },
        "SchedulerFrequency": {
          "default": "Scheduling interval (minutes)",
        },
        "SchedulingActive": {
          "default": "Enable scheduling",
        },
        "StartedTags": {
          "default": "Start tags",
        },
        "StoppedTags": {
          "default": "Stop tags",
        },
        "TagName": {
          "default": "Schedule tag key",
        },
        "Trace": {
          "default": "Enable CloudWatch debug Logs",
        },
        "UsingAWSOrganizations": {
          "default": "Use AWS Organizations",
        },
        "ddbDeletionProtection": {
          "default": "Protect DynamoDB Tables",
        },
      },
    },
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "id": "AwsSolutions-L1",
          "reason": "Python 3.11 is the newest available runtime. This finding is a false positive.",
        },
      ],
    },
  },
  "Outputs": {
    "AccountId": {
      "Description": "Hub Account ID - for use in corresponding spoke stack parameter",
      "Value": {
        "Ref": "AWS::AccountId",
      },
    },
    "ConfigurationTable": {
      "Description": "DynamoDB Configuration table ARN",
      "Value": {
        "Fn::GetAtt": [
          "ConfigTable",
          "Arn",
        ],
      },
    },
    "IssueSnsTopicArn": {
      "Description": "Notification SNS Topic ARN",
      "Value": {
        "Ref": "InstanceSchedulerSnsTopic",
      },
    },
    "SchedulerRoleArn": {
      "Description": "Scheduler role ARN",
      "Value": {
        "Fn::GetAtt": [
          "SchedulerRole59E73443",
          "Arn",
        ],
      },
    },
    "ServiceInstanceScheduleServiceToken": {
      "Description": "Custom resource provider ARN - use as ServiceToken property value for CloudFormation Schedules",
      "Value": {
        "Fn::GetAtt": [
          "Main",
          "Arn",
        ],
      },
    },
  },
  "Parameters": {
    "AsgMemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda function that schedules ASG resources. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "AsgRulePrefix": {
      "Default": "is-",
      "Description": "The prefix Instance Scheduler will use when naming Scheduled Scaling actions for AutoScaling Groups. Actions with this prefix will be added and removed by Instance Scheduler as needed.",
      "Type": "String",
    },
    "AsgScheduledTagKey": {
      "Default": "scheduled",
      "Description": "Key for the tag Instance Scheduler will add to scheduled AutoScaling Groups",
      "Type": "String",
    },
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "CreateRdsSnapshot": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Create snapshots before stopping RDS instances (not clusters).",
      "Type": "String",
    },
    "DefaultTimezone": {
      "AllowedValues": [
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka",
        "Africa/Malabo",
        "Africa/Maputo",
        "Africa/Maseru",
        "Africa/Mbabane",
        "Africa/Mogadishu",
        "Africa/Monrovia",
        "Africa/Nairobi",
        "Africa/Ndjamena",
        "Africa/Niamey",
        "Africa/Nouakchott",
        "Africa/Ouagadougou",
        "Africa/Porto-Novo",
        "Africa/Sao_Tome",
        "Africa/Tripoli",
        "Africa/Tunis",
        "Africa/Windhoek",
        "America/Adak",
        "America/Anchorage",
        "America/Anguilla",
        "America/Antigua",
        "America/Araguaina",
        "America/Argentina/Buenos_Aires",
        "America/Argentina/Catamarca",
        "America/Argentina/Cordoba",
        "America/Argentina/Jujuy",
        "America/Argentina/La_Rioja",
        "America/Argentina/Mendoza",
        "America/Argentina/Rio_Gallegos",
        "America/Argentina/Salta",
        "America/Argentina/San_Juan",
        "America/Argentina/San_Luis",
        "America/Argentina/Tucuman",
        "America/Argentina/Ushuaia",
        "America/Aruba",
        "America/Asuncion",
        "America/Atikokan",
        "America/Bahia",
        "America/Bahia_Banderas",
        "America/Barbados",
        "America/Belem",
        "America/Belize",
        "America/Blanc-Sablon",
        "America/Boa_Vista",
        "America/Bogota",
        "America/Boise",
        "America/Cambridge_Bay",
        "America/Campo_Grande",
        "America/Cancun",
        "America/Caracas",
        "America/Cayenne",
        "America/Cayman",
        "America/Chicago",
        "America/Chihuahua",
        "America/Costa_Rica",
        "America/Creston",
        "America/Cuiaba",
        "America/Curacao",
        "America/Danmarkshavn",
        "America/Dawson",
        "America/Dawson_Creek",
        "America/Denver",
        "America/Detroit",
        "America/Dominica",
        "America/Edmonton",
        "America/Eirunepe",
        "America/El_Salvador",
        "America/Fortaleza",
        "America/Glace_Bay",
        "America/Godthab",
        "America/Goose_Bay",
        "America/Grand_Turk",
        "America/Grenada",
        "America/Guadeloupe",
        "America/Guatemala",
        "America/Guayaquil",
        "America/Guyana",
        "America/Halifax",
        "America/Havana",
        "America/Hermosillo",
        "America/Indiana/Indianapolis",
        "America/Indiana/Knox",
        "America/Indiana/Marengo",
        "America/Indiana/Petersburg",
        "America/Indiana/Tell_City",
        "America/Indiana/Vevay",
        "America/Indiana/Vincennes",
        "America/Indiana/Winamac",
        "America/Inuvik",
        "America/Iqaluit",
        "America/Jamaica",
        "America/Juneau",
        "America/Kentucky/Louisville",
        "America/Kentucky/Monticello",
        "America/Kralendijk",
        "America/La_Paz",
        "America/Lima",
        "America/Los_Angeles",
        "America/Lower_Princes",
        "America/Maceio",
        "America/Managua",
        "America/Manaus",
        "America/Marigot",
        "America/Martinique",
        "America/Matamoros",
        "America/Mazatlan",
        "America/Menominee",
        "America/Merida",
        "America/Metlakatla",
        "America/Mexico_City",
        "America/Miquelon",
        "America/Moncton",
        "America/Monterrey",
        "America/Montevideo",
        "America/Montreal",
        "America/Montserrat",
        "America/Nassau",
        "America/New_York",
        "America/Nipigon",
        "America/Nome",
        "America/Noronha",
        "America/North_Dakota/Beulah",
        "America/North_Dakota/Center",
        "America/North_Dakota/New_Salem",
        "America/Ojinaga",
        "America/Panama",
        "America/Pangnirtung",
        "America/Paramaribo",
        "America/Phoenix",
        "America/Port-au-Prince",
        "America/Port_of_Spain",
        "America/Porto_Velho",
        "America/Puerto_Rico",
        "America/Rainy_River",
        "America/Rankin_Inlet",
        "America/Recife",
        "America/Regina",
        "America/Resolute",
        "America/Rio_Branco",
        "America/Santa_Isabel",
        "America/Santarem",
        "America/Santiago",
        "America/Santo_Domingo",
        "America/Sao_Paulo",
        "America/Scoresbysund",
        "America/Sitka",
        "America/St_Barthelemy",
        "America/St_Johns",
        "America/St_Kitts",
        "America/St_Lucia",
        "America/St_Thomas",
        "America/St_Vincent",
        "America/Swift_Current",
        "America/Tegucigalpa",
        "America/Thule",
        "America/Thunder_Bay",
        "America/Tijuana",
        "America/Toronto",
        "America/Tortola",
        "America/Vancouver",
        "America/Whitehorse",
        "America/Winnipeg",
        "America/Yakutat",
        "America/Yellowknife",
        "Antarctica/Casey",
        "Antarctica/Davis",
        "Antarctica/DumontDUrville",
        "Antarctica/Macquarie",
        "Antarctica/Mawson",
        "Antarctica/McMurdo",
        "Antarctica/Palmer",
        "Antarctica/Rothera",
        "Antarctica/Syowa",
        "Antarctica/Vostok",
        "Arctic/Longyearbyen",
        "Asia/Aden",
        "Asia/Almaty",
        "Asia/Amman",
        "Asia/Anadyr",
        "Asia/Aqtau",
        "Asia/Aqtobe",
        "Asia/Ashgabat",
        "Asia/Baghdad",
        "Asia/Bahrain",
        "Asia/Baku",
        "Asia/Bangkok",
        "Asia/Beirut",
        "Asia/Bishkek",
        "Asia/Brunei",
        "Asia/Choibalsan",
        "Asia/Chongqing",
        "Asia/Colombo",
        "Asia/Damascus",
        "Asia/Dhaka",
        "Asia/Dili",
        "Asia/Dubai",
        "Asia/Dushanbe",
        "Asia/Gaza",
        "Asia/Harbin",
        "Asia/Hebron",
        "Asia/Ho_Chi_Minh",
        "Asia/Hong_Kong",
        "Asia/Hovd",
        "Asia/Irkutsk",
        "Asia/Jakarta",
        "Asia/Jayapura",
        "Asia/Jerusalem",
        "Asia/Kabul",
        "Asia/Kamchatka",
        "Asia/Karachi",
        "Asia/Kashgar",
        "Asia/Kathmandu",
        "Asia/Khandyga",
        "Asia/Kolkata",
        "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur",
        "Asia/Kuching",
        "Asia/Kuwait",
        "Asia/Macau",
        "Asia/Magadan",
        "Asia/Makassar",
        "Asia/Manila",
        "Asia/Muscat",
        "Asia/Nicosia",
        "Asia/Novokuznetsk",
        "Asia/Novosibirsk",
        "Asia/Omsk",
        "Asia/Oral",
        "Asia/Phnom_Penh",
        "Asia/Pontianak",
        "Asia/Pyongyang",
        "Asia/Qatar",
        "Asia/Qyzylorda",
        "Asia/Rangoon",
        "Asia/Riyadh",
        "Asia/Sakhalin",
        "Asia/Samarkand",
        "Asia/Seoul",
        "Asia/Shanghai",
        "Asia/Singapore",
        "Asia/Taipei",
        "Asia/Tashkent",
        "Asia/Tbilisi",
        "Asia/Tehran",
        "Asia/Thimphu",
        "Asia/Tokyo",
        "Asia/Ulaanbaatar",
        "Asia/Urumqi",
        "Asia/Ust-Nera",
        "Asia/Vientiane",
        "Asia/Vladivostok",
        "Asia/Yakutsk",
        "Asia/Yekaterinburg",
        "Asia/Yerevan",
        "Atlantic/Azores",
        "Atlantic/Bermuda",
        "Atlantic/Canary",
        "Atlantic/Cape_Verde",
        "Atlantic/Faroe",
        "Atlantic/Madeira",
        "Atlantic/Reykjavik",
        "Atlantic/South_Georgia",
        "Atlantic/St_Helena",
        "Atlantic/Stanley",
        "Australia/Adelaide",
        "Australia/Brisbane",
        "Australia/Broken_Hill",
        "Australia/Currie",
        "Australia/Darwin",
        "Australia/Eucla",
        "Australia/Hobart",
        "Australia/Lindeman",
        "Australia/Lord_Howe",
        "Australia/Melbourne",
        "Australia/Perth",
        "Australia/Sydney",
        "Canada/Atlantic",
        "Canada/Central",
        "Canada/Eastern",
        "Canada/Mountain",
        "Canada/Newfoundland",
        "Canada/Pacific",
        "Europe/Amsterdam",
        "Europe/Andorra",
        "Europe/Athens",
        "Europe/Belgrade",
        "Europe/Berlin",
        "Europe/Bratislava",
        "Europe/Brussels",
        "Europe/Bucharest",
        "Europe/Budapest",
        "Europe/Busingen",
        "Europe/Chisinau",
        "Europe/Copenhagen",
        "Europe/Dublin",
        "Europe/Gibraltar",
        "Europe/Guernsey",
        "Europe/Helsinki",
        "Europe/Isle_of_Man",
        "Europe/Istanbul",
        "Europe/Jersey",
        "Europe/Kaliningrad",
        "Europe/Kiev",
        "Europe/Lisbon",
        "Europe/Ljubljana",
        "Europe/London",
        "Europe/Luxembourg",
        "Europe/Madrid",
        "Europe/Malta",
        "Europe/Mariehamn",
        "Europe/Minsk",
        "Europe/Monaco",
        "Europe/Moscow",
        "Europe/Oslo",
        "Europe/Paris",
        "Europe/Podgorica",
        "Europe/Prague",
        "Europe/Riga",
        "Europe/Rome",
        "Europe/Samara",
        "Europe/San_Marino",
        "Europe/Sarajevo",
        "Europe/Simferopol",
        "Europe/Skopje",
        "Europe/Sofia",
        "Europe/Stockholm",
        "Europe/Tallinn",
        "Europe/Tirane",
        "Europe/Uzhgorod",
        "Europe/Vaduz",
        "Europe/Vatican",
        "Europe/Vienna",
        "Europe/Vilnius",
        "Europe/Volgograd",
        "Europe/Warsaw",
        "Europe/Zagreb",
        "Europe/Zaporozhye",
        "Europe/Zurich",
        "GMT",
        "Indian/Antananarivo",
        "Indian/Chagos",
        "Indian/Christmas",
        "Indian/Cocos",
        "Indian/Comoro",
        "Indian/Kerguelen",
        "Indian/Mahe",
        "Indian/Maldives",
        "Indian/Mauritius",
        "Indian/Mayotte",
        "Indian/Reunion",
        "Pacific/Apia",
        "Pacific/Auckland",
        "Pacific/Chatham",
        "Pacific/Chuuk",
        "Pacific/Easter",
        "Pacific/Efate",
        "Pacific/Enderbury",
        "Pacific/Fakaofo",
        "Pacific/Fiji",
        "Pacific/Funafuti",
        "Pacific/Galapagos",
        "Pacific/Gambier",
        "Pacific/Guadalcanal",
        "Pacific/Guam",
        "Pacific/Honolulu",
        "Pacific/Johnston",
        "Pacific/Kiritimati",
        "Pacific/Kosrae",
        "Pacific/Kwajalein",
        "Pacific/Majuro",
        "Pacific/Marquesas",
        "Pacific/Midway",
        "Pacific/Nauru",
        "Pacific/Niue",
        "Pacific/Norfolk",
        "Pacific/Noumea",
        "Pacific/Pago_Pago",
        "Pacific/Palau",
        "Pacific/Pitcairn",
        "Pacific/Pohnpei",
        "Pacific/Port_Moresby",
        "Pacific/Rarotonga",
        "Pacific/Saipan",
        "Pacific/Tahiti",
        "Pacific/Tarawa",
        "Pacific/Tongatapu",
        "Pacific/Wake",
        "Pacific/Wallis",
        "US/Alaska",
        "US/Arizona",
        "US/Central",
        "US/Eastern",
        "US/Hawaii",
        "US/Mountain",
        "US/Pacific",
        "UTC",
      ],
      "Default": "UTC",
      "Description": "Default IANA time zone identifier used by schedules that do not specify a time zone.",
      "Type": "String",
    },
    "EnableRdsClusterScheduling": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling RDS clusters (multi-AZ and Aurora).",
      "Type": "String",
    },
    "EnableSSMMaintenanceWindows": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Allow schedules to specify a maintenance window name. Instance Scheduler will ensure the instance is running during that maintenance window.",
      "Type": "String",
    },
    "KmsKeyArns": {
      "Default": "",
      "Description": "comma-separated list of kms arns to grant Instance Scheduler kms:CreateGrant permissions to provide the EC2  service with Decrypt permissions for encrypted EBS volumes. This allows the scheduler to start EC2 instances with attached encrypted EBS volumes. provide just (*) to give limited access to all kms keys, leave blank to disable. For details on the exact policy created, refer to security section of the implementation guide (https://aws.amazon.com/solutions/implementations/instance-scheduler-on-aws/)",
      "Type": "CommaDelimitedList",
    },
    "LogRetentionDays": {
      "AllowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653",
      ],
      "Default": 30,
      "Description": "Retention period in days for logs.",
      "Type": "Number",
    },
    "MemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda function that schedules EC2 and RDS resources. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "Namespace": {
      "Default": "default",
      "Description": "Unique identifier per deployment. Cannot contain spaces.",
      "Type": "String",
    },
    "OpsMonitoring": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Deploy operational metrics and an Ops Monitoring Dashboard to Cloudwatch",
      "Type": "String",
    },
    "OrchestratorMemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda functions that coordinate multi-account, multi-region scheduling for the other scheduling lambdas. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "Principals": {
      "Default": "",
      "Description": "(Required) If using AWS Organizations, provide the Organization ID. Eg. o-xxxxyyy. Else, provide a comma-separated list of spoke account ids to schedule. Eg.: 1111111111, 2222222222 or {param: ssm-param-name}",
      "Type": "CommaDelimitedList",
    },
    "Regions": {
      "Default": "",
      "Description": "Comma-separated List of regions in which resources should be scheduled. Leave blank for current region only.",
      "Type": "CommaDelimitedList",
    },
    "ScheduleASGs": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling AutoScaling Groups",
      "Type": "String",
    },
    "ScheduleDocDb": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling DocumentDB clusters.",
      "Type": "String",
    },
    "ScheduleEC2": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling EC2 instances.",
      "Type": "String",
    },
    "ScheduleLambdaAccount": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Enable scheduling in this account.",
      "Type": "String",
    },
    "ScheduleNeptune": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling Neptune clusters.",
      "Type": "String",
    },
    "ScheduleRds": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling individual RDS instances (not clusters).",
      "Type": "String",
    },
    "SchedulerFrequency": {
      "AllowedValues": [
        "1",
        "2",
        "5",
        "10",
        "15",
        "30",
        "60",
      ],
      "Default": "5",
      "Description": "Interval in minutes between scheduler executions. For EC2 and RDS",
      "Type": "Number",
    },
    "SchedulingActive": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Set to "No" to disable scheduling for all services.",
      "Type": "String",
    },
    "StartedTags": {
      "Default": "InstanceScheduler-LastAction=Started By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
      "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on started instances. Leave blank to disable.",
      "Type": "String",
    },
    "StoppedTags": {
      "Default": "InstanceScheduler-LastAction=Stopped By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
      "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on stopped instances. Leave blank to disable.",
      "Type": "String",
    },
    "TagName": {
      "Default": "Schedule",
      "Description": "The tag key Instance Scheduler will read to determine the schedule for a resource. The value of the tag with this key on a resource specifies the name of the schedule.",
      "MaxLength": 127,
      "MinLength": 1,
      "Type": "String",
    },
    "Trace": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Enable debug-level logging in CloudWatch Logs.",
      "Type": "String",
    },
    "UsingAWSOrganizations": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Deploy resources to enable automatic spoke stack registration using AWS Organizations.",
      "Type": "String",
    },
    "ddbDeletionProtection": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable deletion protection for DynamoDB tables used by the solution. This will cause the tables to be retained when deleting this stack. To delete the tables when deleting this stack, first disable this parameter.",
      "Type": "String",
    },
  },
  "Resources": {
    "ASGHandler0F6D6751": {
      "DependsOn": [
        "ASGRoleDefaultPolicy0DBFE29F",
        "ASGRole21C54AF6",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler for AutoScaling Groups version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULING_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Namespace",
                  },
                  "-ASG-Scheduling-Role",
                ],
              ],
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "asg",
            "RULE_PREFIX": {
              "Ref": "AsgRulePrefix",
            },
            "SCHEDULED_TAG_KEY": {
              "Ref": "AsgScheduledTagKey",
            },
            "SCHEDULE_TAG_KEY": {
              "Ref": "TagName",
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "AsgMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGRole21C54AF6",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGHandlerLogGroupA8EE11F3": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGHandler0F6D6751",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGPolicy3B6FAA4E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-ASG-Scheduling-Role",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGHandlerLogGroupA8EE11F3",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/",
                    {
                      "Ref": "Namespace",
                    },
                    "-ASG-Scheduling-Role",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGPolicy3B6FAA4E",
        "Roles": [
          {
            "Ref": "ASGRole21C54AF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGRole21C54AF6": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Explicit role name required for assumedBy arn principle in spoke stack",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-AsgRequestHandler-Role",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGRoleDefaultPolicy0DBFE29F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGRoleDefaultPolicy0DBFE29F",
        "Roles": [
          {
            "Ref": "ASGRole21C54AF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchLogGroup58E06A86": {
      "Condition": "ScheduleASGsCondition",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGSchedulerASGOrchestrator6629B72C",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGSchedulerASGOrchPolicyB5F2EC10": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGSchedulerASGOrchLogGroup58E06A86",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerASGOrchPolicyB5F2EC10",
        "Roles": [
          {
            "Ref": "ASGSchedulerASGOrchRole5B79F32B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchRole5B79F32B": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<ASGHandler0F6D6751.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the ASG scheduling request handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ASGHandler0F6D6751",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ASGHandler0F6D6751",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
        "Roles": [
          {
            "Ref": "ASGSchedulerASGOrchRole5B79F32B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchRule510DB4D0": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "Description": "Instance Scheduler - Rule to trigger scheduling for AutoScaling Groups version v9.9.9",
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ASGSchedulerASGOrchestrator6629B72C",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{}",
            "RetryPolicy": {
              "MaximumRetryAttempts": 5,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ASGSchedulerASGOrchRuleAllowEventRulestackASGSchedulerASGOrchestrator9436C96D61301E75": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchestrator6629B72C",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchRule510DB4D0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ASGSchedulerASGOrchestrator6629B72C": {
      "Condition": "ScheduleASGsCondition",
      "DependsOn": [
        "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
        "ASGSchedulerASGOrchRole5B79F32B",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler orchestrator for AutoScaling Groups version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULER_NAME": {
              "Ref": "ASGHandler0F6D6751",
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "asg_orch",
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchRole5B79F32B",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Required permissions to describe AutoScaling Groups",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:autoscaling:*:<AWS::AccountId>:autoScalingGroup:*:autoScalingGroupName/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Required permissions to modify scheduled scaling actions on AutoScaling Groups",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "DescribeAutoScalingGroups and autoscaling:DescribeScheduledActions actions require wildcard permissions",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:BatchPutScheduledUpdateGroupAction",
                "autoscaling:BatchDeleteScheduledAction",
                "autoscaling:CreateOrUpdateTags",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeScheduledActions",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1",
        "Roles": [
          {
            "Ref": "ASGSchedulerAsgSchedulingRoleC184E725",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerAsgSchedulingRoleC184E725": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "The role name is defined to allow cross account access from the hub account.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "ASGRole21C54AF6",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-ASG-Scheduling-Role",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerScheduleUpdateHandlerCC8A8D00": {
      "Condition": "ScheduleASGsCondition",
      "DependsOn": [
        "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
        "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler handler for updates to schedules version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULER_NAME": {
              "Ref": "ASGHandler0F6D6751",
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "sch_upd",
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGSchedulerScheduleUpdateHandlerDynamoDBEventSourcestackConfigTableA8EC614E569DEAA0": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ConfigTable",
            "StreamArn",
          ],
        },
        "FilterCriteria": {
          "Filters": [
            {
              "Pattern": "{"dynamodb":{"Keys":{"type":{"S":["schedule","period"]}}}}",
            },
            {
              "Pattern": "{"eventName":["INSERT","MODIFY"]}",
            },
          ],
        },
        "FunctionName": {
          "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00",
        },
        "MaximumBatchingWindowInSeconds": 60,
        "StartingPosition": "LATEST",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D": {
      "Condition": "ScheduleASGsCondition",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2",
        "Roles": [
          {
            "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerScheduleUpdateHandlerRole25C919AA": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<ASGHandler0F6D6751.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the ASG scheduling request handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ConfigTable",
                  "StreamArn",
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ASGHandler0F6D6751",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ASGHandler0F6D6751",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
        "Roles": [
          {
            "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ConfigTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "type",
            "AttributeType": "S",
          },
          {
            "AttributeName": "name",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "type",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "name",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "StreamSpecification": {
          "StreamViewType": "KEYS_ONLY",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "InstanceSchedulerEncryptionKey": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "Description": "Key for SNS",
        "EnableKeyRotation": true,
        "Enabled": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "InstanceSchedulerEncryptionKeyAlias": {
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName",
              },
              "-instance-scheduler-encryption-key",
            ],
          ],
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstanceSchedulerSnsTopic": {
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "Main": {
      "DependsOn": [
        "MainLambdaRoleDefaultPolicy5347C905",
        "MainLambdaRole500DC55A",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "EC2 and RDS instance scheduler, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_AWS_ORGANIZATIONS": {
              "Fn::If": [
                "UsingAWSOrganizationsCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "TRACE": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-InstanceSchedulerMain",
            ],
          ],
        },
        "Handler": "lambda_handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "MainLambdaRole500DC55A",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MainLambdaRole500DC55A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MainLambdaRoleDefaultPolicy5347C905": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use the solution's custom log group",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/<AWS::StackName>-InstanceSchedulerMain:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to modify own log group retention policy",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:PutRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "AWS::StackName",
                    },
                    "-InstanceSchedulerMain:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MainLambdaRoleDefaultPolicy5347C905",
        "Roles": [
          {
            "Ref": "MainLambdaRole500DC55A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MaintenanceWindowTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
          {
            "AttributeName": "name-id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "account-region",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "name-id",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "MetricsGeneratorRole83735CC4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetricsGeneratorRoleDefaultPolicy19F5F29A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetricsGeneratorRoleDefaultPolicy19F5F29A",
        "Roles": [
          {
            "Ref": "MetricsGeneratorRole83735CC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetricsUuidGenerator172A04DB": {
      "DependsOn": [
        "MetricsGeneratorRoleDefaultPolicy19F5F29A",
        "MetricsGeneratorRole83735CC4",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is a custom resource. Concurrent calls are very limited.",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Custom Resource Provider used to generate unique UUIDs for solution deployments",
        "Environment": {
          "Variables": {
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
            "UUID_KEY": "/Solutions/my-solution-name/UUID/",
          },
        },
        "Handler": "handle_metrics_uuid_request",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "MetricsGeneratorRole83735CC4",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MetricsUuidHandlerLogGroupF41CCF90": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "MetricsUuidGenerator172A04DB",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MetricsUuidPermissionsPolicyD0672406": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ssm:<AWS::Region>:<AWS::AccountId>:parameter/Solutions/instance-scheduler-on-aws/UUID/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "backwards compatibility (<=1.5.3) -- ability to read metrics UUID from ssm parameter",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "MetricsUuidHandlerLogGroupF41CCF90",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/Solutions/my-solution-name/UUID/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetricsUuidPermissionsPolicyD0672406",
        "Roles": [
          {
            "Ref": "MetricsGeneratorRole83735CC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetricsUuidProvider": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MetricsUuidPermissionsPolicyD0672406",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "MetricsUuidGenerator172A04DB",
            "Arn",
          ],
        },
      },
      "Type": "Custom::MetricsUuid",
      "UpdateReplacePolicy": "Delete",
    },
    "OperationalInsightsDashboardE3C49DFC": {
      "Condition": "OpsMonitoringCondition",
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{"start":"-P7D","periodOverride":"inherit","widgets":[{"type":"text","width":24,"height":1,"x":0,"y":0,"properties":{"markdown":"# EC2"}},{"type":"metric","width":6,"height":6,"x":0,"y":1,"properties":{"view":"singleValue","title":"Total EC2 Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"EC2 Instances","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "))"}]],"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":6,"y":1,"properties":{"view":"pie","title":"EC2 Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${LAST}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{},"legend":{"position":"right"},"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":12,"y":1,"properties":{"view":"singleValue","title":"Total EC2 Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"Hours Saved","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")) * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":6,"height":6,"x":18,"y":1,"properties":{"view":"pie","title":"EC2 Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${SUM}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ") * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"yAxis":{},"legend":{"position":"right"},"setPeriodToTimeRange":true,"stat":"Sum"}},{"type":"metric","width":12,"height":6,"x":0,"y":7,"properties":{"view":"timeSeries","title":"Controlled EC2 Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":7,"properties":{"view":"timeSeries","title":"Running EC2 Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":0,"y":13,"properties":{"view":"timeSeries","title":"Controlled EC2 Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":13,"properties":{"view":"timeSeries","title":"Running EC2 Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"text","width":24,"height":1,"x":0,"y":19,"properties":{"markdown":"# RDS"}},{"type":"metric","width":6,"height":6,"x":0,"y":20,"properties":{"view":"singleValue","title":"Total RDS Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"RDS Instances","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "))"}]],"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":6,"y":20,"properties":{"view":"pie","title":"RDS Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${LAST}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{},"legend":{"position":"right"},"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":12,"y":20,"properties":{"view":"singleValue","title":"Total RDS Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"Hours Saved","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")) * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":6,"height":6,"x":18,"y":20,"properties":{"view":"pie","title":"RDS Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${SUM}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ") * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60","period":2592000}]],"yAxis":{},"legend":{"position":"right"},"setPeriodToTimeRange":true,"stat":"Sum"}},{"type":"metric","width":12,"height":6,"x":0,"y":26,"properties":{"view":"timeSeries","title":"Controlled RDS Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Controlled RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":26,"properties":{"view":"timeSeries","title":"Running RDS Instances By Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":0,"y":32,"properties":{"view":"timeSeries","title":"Controlled RDS Instances By Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Controlled RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":32,"properties":{"view":"timeSeries","title":"Running RDS Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"text","width":24,"height":1,"x":0,"y":38,"properties":{"markdown":"# Lambda"}},{"type":"metric","width":12,"height":6,"x":0,"y":39,"properties":{"view":"timeSeries","title":"Lambda Duration (P99)","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
              "",{"label":"Orchestrator"}],["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
              "",{"label":"SchedulingRequestHandler"}],["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "ASGHandler0F6D6751",
              },
              "",{"label":"AsgHandler"}]],"annotations":{"horizontal":[{"value":300000,"fill":"below","color":"#d62728","label":"Timeout Threshold (5 minutes)","yAxis":"left"},{"value":240000,"fill":"below","color":"#ff7f0e","yAxis":"left"},{"value":180000,"fill":"below","color":"#2ca02c","yAxis":"left"}]},"yAxis":{"left":{"label":"duration (ms)","showUnits":false}},"legend":{"position":"bottom"},"liveData":true,"period":1800,"stat":"p99"}},{"type":"metric","width":12,"height":6,"x":12,"y":39,"properties":{"view":"timeSeries","title":"Lambda Errors","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
              "",{"label":"Orchestrator"}],["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
              "",{"label":"SchedulingRequestHandler"}],["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "ASGHandler0F6D6751",
              },
              "",{"label":"AsgHandler"}]],"yAxis":{"left":{"label":"Errors","showUnits":false}},"legend":{"position":"bottom"},"liveData":true,"period":1800,"stat":"Sum"}}]}",
            ],
          ],
        },
        "DashboardName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-",
              {
                "Ref": "Namespace",
              },
              "-Operational-Insights-Dashboard",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "SchedulerConfigHelper": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SchedulerLogGroup",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "Main",
            "Arn",
          ],
        },
        "log_retention_days": {
          "Ref": "LogRetentionDays",
        },
        "remote_account_ids": {
          "Ref": "Principals",
        },
        "timeout": 120,
      },
      "Type": "Custom::ServiceSetup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerEventRuleAllowEventRulestackSchedulingOrchestrator54551718E1E4729D": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SchedulingOrchestratorBB4C4C5A",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SchedulerEventRuleDD9A6B32",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SchedulerEventRuleDD9A6B32": {
      "Properties": {
        "Description": "Instance Scheduler - Rule to trigger instance for scheduler function version v9.9.9",
        "ScheduleExpression": {
          "Fn::FindInMap": [
            "CronExpressionsForSchedulingIntervals",
            "IntervalMinutesToCron",
            {
              "Ref": "SchedulerFrequency",
            },
          ],
        },
        "State": {
          "Fn::If": [
            "SchedulingActiveCondition",
            "ENABLED",
            "DISABLED",
          ],
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SchedulingOrchestratorBB4C4C5A",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"scheduled_action":"run_orchestrator"}",
            "RetryPolicy": {
              "MaximumRetryAttempts": 5,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SchedulerLogGroup": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatch log groups only have transactional data from the Lambda function, this template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group.",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-logs",
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerRole59E73443": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "The role name is defined to allow cross account access from the hub account.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "schedulingRequestHandlerRoleD87803EB",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-Scheduler-Role",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SchedulerRoleKmsPermissionsBF1B9F02": {
      "Condition": "SchedulerRolekmsAccessCondition93ED0C6C",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Specific kms keys are unknown until runtime, for security, access is instead restricted to only granting decryption permissions to the ec2 service for encrypted EBS volumes",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:CreateGrant",
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": true,
                },
                "ForAllValues:StringEquals": {
                  "kms:EncryptionContextKeys": [
                    "aws:ebs:id",
                  ],
                  "kms:GrantOperations": [
                    "Decrypt",
                  ],
                },
                "Null": {
                  "kms:EncryptionContextKeys": false,
                  "kms:GrantOperations": false,
                },
                "StringLike": {
                  "kms:ViaService": "ec2.*.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "KmsKeyArns",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRoleKmsPermissionsBF1B9F02",
        "Roles": [
          {
            "Ref": "SchedulerRole59E73443",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulerRoleSchedulingPermissions2C1B256A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:db:*",
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:cluster:*",
                "Resource::arn:<AWS::Partition>:ec2:*:<AWS::AccountId>:instance/*",
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:snapshot:*",
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required scheduling permissions",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "required scheduling permissions",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeInstances",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "ec2:ModifyInstanceAttribute",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:ec2:*:\${AWS::AccountId}:instance/*",
              },
            },
            {
              "Action": "ssm:DescribeMaintenanceWindows",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "rds:DescribeDBClusters",
                "rds:DescribeDBInstances",
                "tag:GetResources",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "rds:DeleteDBSnapshot",
                "rds:DescribeDBSnapshots",
                "rds:StopDBInstance",
                "rds:CreateDBSnapshot",
                "rds:AddTagsToResource",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:snapshot:*",
              },
            },
            {
              "Action": [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:StartDBInstance",
                "rds:StopDBInstance",
                "rds:CreateDBSnapshot",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:db:*",
              },
            },
            {
              "Action": [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:StartDBCluster",
                "rds:StopDBCluster",
                "rds:CreateDBClusterSnapshot",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:cluster:*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRoleSchedulingPermissions2C1B256A",
        "Roles": [
          {
            "Ref": "SchedulerRole59E73443",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulingOrchestratorBB4C4C5A": {
      "DependsOn": [
        "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
        "SchedulingOrchestratorRoleAD0FF7B1",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is invoked by a scheduled rule, it does not run concurrently",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "scheduling orchestrator for Instance Scheduler on AWS, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_ASG_SERVICE": {
              "Fn::If": [
                "ScheduleASGsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_AWS_ORGANIZATIONS": {
              "Fn::If": [
                "UsingAWSOrganizationsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DOCDB_SERVICE": {
              "Fn::If": [
                "ScheduleDocDbCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SERVICE": {
              "Fn::If": [
                "ScheduleEC2Condition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
              "Fn::If": [
                "EnableSSMMaintenanceWindowsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_NEPTUNE_SERVICE": {
              "Fn::If": [
                "ScheduleNeptuneCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_CLUSTERS": {
              "Fn::If": [
                "EnableRdsClusterSchedulingCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SERVICE": {
              "Fn::If": [
                "ScheduleRdsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SNAPSHOTS": {
              "Fn::If": [
                "CreateRdsSnapshotCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "OPS_DASHBOARD_ENABLED": {
              "Fn::If": [
                "OpsMonitoringCondition",
                "True",
                "False",
              ],
            },
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SCHEDULING_REQUEST_HANDLER_NAME": {
              "Ref": "schedulingRequestHandlerLambdaC395DC9E",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "START_TAGS": {
              "Ref": "StartedTags",
            },
            "STOP_TAGS": {
              "Ref": "StoppedTags",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "handle_orchestration_request",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "SchedulingOrchestratorRoleAD0FF7B1",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SchedulingOrchestratorLogGroup24735009": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SchedulingOrchestratorPermissionsPolicyC2148A26": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ssm:*:<AWS::AccountId>:parameter/*",
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Orchestrator requires access to SSM parameters for translating {param: my-param} values to configured account ids",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for ssm:DescribeParameters",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulingOrchestratorLogGroup24735009",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ssm:DescribeParameters",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulingOrchestratorPermissionsPolicyC2148A26",
        "Roles": [
          {
            "Ref": "SchedulingOrchestratorRoleAD0FF7B1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulingOrchestratorRoleAD0FF7B1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<schedulingRequestHandlerLambdaC395DC9E.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permission to invoke request handler lambda",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "schedulingRequestHandlerLambdaC395DC9E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "schedulingRequestHandlerLambdaC395DC9E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
        "Roles": [
          {
            "Ref": "SchedulingOrchestratorRoleAD0FF7B1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeDeregistrationRunbookFF4A7B49": {
      "Properties": {
        "Content": {
          "assumeRole": {
            "Fn::GetAtt": [
              "SpokeDeregistrationRunbookRole0A1D0232",
              "Arn",
            ],
          },
          "description": "Deregister a spoke account from Instance Scheduler on AWS on demand",
          "mainSteps": [
            {
              "action": "aws:invokeLambdaFunction",
              "description": "Invokes the Instance Scheduler on AWS spoke registration lambda to deregister a given AWS Account ID",
              "inputs": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SpokeRegistrationHandler923F17AC",
                    "Arn",
                  ],
                },
                "InputPayload": {
                  "account": "{{ AccountId }}",
                  "operation": "Deregister",
                },
                "InvocationType": "RequestResponse",
              },
              "name": "InvokeSpokeRegistrationLambda",
            },
          ],
          "parameters": {
            "AccountId": {
              "allowedPattern": "^\\d{12}$",
              "description": "Spoke Account ID used for registration",
              "type": "String",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentFormat": "YAML",
        "DocumentType": "Automation",
        "Tags": [
          {
            "Key": "CdkGenerated",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::SSM::Document",
    },
    "SpokeDeregistrationRunbookRole0A1D0232": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Role assumed by SSM Automation to call the spoke registration lambda",
      },
      "Type": "AWS::IAM::Role",
    },
    "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the spoke registration lambda",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SpokeRegistrationHandler923F17AC",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SpokeRegistrationHandler923F17AC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D",
        "Roles": [
          {
            "Ref": "SpokeDeregistrationRunbookRole0A1D0232",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeRegistrationHandler923F17AC": {
      "DependsOn": [
        "SpokeRegistrationRoleDefaultPolicy7A7A6954",
        "SpokeRegistrationRole0E2E4D3E",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is invoke by new account registration/deregistration events and is not likely to have much concurrency",
            },
            {
              "id": "F13",
              "reason": "This lambda scopes invoke permissions to members of the same AWS organization. This is the narrowest possible scope that still allows new spoke accounts to register themselves with the hub after being deployed",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "spoke account registration handler, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              "InstanceScheduler-",
              {
                "Ref": "Namespace",
              },
              "-SpokeRegistration",
            ],
          ],
        },
        "Handler": "handle_spoke_registration_event",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SpokeRegistrationRole0E2E4D3E",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SpokeRegistrationLambdaCrossAccountPermission": {
      "Condition": "UsingAWSOrganizationsCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F13",
              "reason": "Lambda permission policy requires principal wildcard for spoke accounts to self register by invoking this function.This is acceptable as we are narrowing the authorized accounts to only those contained within the org via principalOrgId",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SpokeRegistrationHandler923F17AC",
        },
        "Principal": "*",
        "PrincipalOrgID": {
          "Fn::Select": [
            0,
            {
              "Ref": "Principals",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SpokeRegistrationPolicy600671FC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:*",
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:log-stream:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard required for creating and writing to log group and stream",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/InstanceScheduler-",
                    {
                      "Ref": "Namespace",
                    },
                    "-SpokeRegistration:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/InstanceScheduler-",
                    {
                      "Ref": "Namespace",
                    },
                    "-SpokeRegistration:log-stream:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeRegistrationPolicy600671FC",
        "Roles": [
          {
            "Ref": "SpokeRegistrationRole0E2E4D3E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeRegistrationRole0E2E4D3E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SpokeRegistrationRoleDefaultPolicy7A7A6954": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeRegistrationRoleDefaultPolicy7A7A6954",
        "Roles": [
          {
            "Ref": "SpokeRegistrationRole0E2E4D3E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StateTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "service",
            "AttributeType": "S",
          },
          {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "service",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "account-region",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "schedulingRequestHandlerLambdaC395DC9E": {
      "DependsOn": [
        "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
        "schedulingRequestHandlerRoleD87803EB",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Handles scheduling requests for Instance Scheduler on AWS, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DOCDB_SERVICE": {
              "Fn::If": [
                "ScheduleDocDbCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
              "Fn::If": [
                "EnableSSMMaintenanceWindowsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_NEPTUNE_SERVICE": {
              "Fn::If": [
                "ScheduleNeptuneCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_OPS_MONITORING": {
              "Fn::If": [
                "OpsMonitoringCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_CLUSTERS": {
              "Fn::If": [
                "EnableRdsClusterSchedulingCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SERVICE": {
              "Fn::If": [
                "ScheduleRdsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SNAPSHOTS": {
              "Fn::If": [
                "CreateRdsSnapshotCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "MAINT_WINDOW_TABLE": {
              "Ref": "MaintenanceWindowTable",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "SCHEDULER_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Namespace",
                  },
                  "-Scheduler-Role",
                ],
              ],
            },
            "SCHEDULE_TAG_KEY": {
              "Ref": "TagName",
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "STACK_NAME": {
              "Ref": "AWS::StackName",
            },
            "START_TAGS": {
              "Ref": "StartedTags",
            },
            "STATE_TABLE": {
              "Ref": "StateTable",
            },
            "STOP_TAGS": {
              "Ref": "StoppedTags",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "handle_scheduling_request",
        "MemorySize": {
          "Ref": "MemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "schedulingRequestHandlerRoleD87803EB",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "schedulingRequestHandlerLogGroup92A14530": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "schedulingRequestHandlerPolicy1BE05FC4": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-Scheduler-Role",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Ability to publish custom metrics to cloudwatch",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "cloudwatch:PutMetricData action requires wildcard",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "schedulingRequestHandlerLogGroup92A14530",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StateTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "MaintenanceWindowTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/",
                    {
                      "Ref": "Namespace",
                    },
                    "-Scheduler-Role",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName",
                        },
                        ":InstanceScheduler",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "schedulingRequestHandlerPolicy1BE05FC4",
        "Roles": [
          {
            "Ref": "schedulingRequestHandlerRoleD87803EB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "schedulingRequestHandlerRoleD87803EB": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Explicit role name required for assumedBy arn principle in spoke stack",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-SchedulingRequestHandler-Role",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "schedulingRequestHandlerRoleDefaultPolicy938ADC4A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "ability to call spoke-registration handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
        "Roles": [
          {
            "Ref": "schedulingRequestHandlerRoleD87803EB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`InstanceSchedulerStack snapshot test 1`] = `
{
  "Conditions": {
    "AnonymizedMetricsEnabled": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "Send",
            "AnonymousUsage",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "CreateRdsSnapshotCondition": {
      "Fn::Equals": [
        {
          "Ref": "CreateRdsSnapshot",
        },
        "Yes",
      ],
    },
    "EnableRdsClusterSchedulingCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableRdsClusterScheduling",
        },
        "Enabled",
      ],
    },
    "EnableSSMMaintenanceWindowsCondition": {
      "Fn::Equals": [
        {
          "Ref": "EnableSSMMaintenanceWindows",
        },
        "Yes",
      ],
    },
    "OpsMonitoringCondition": {
      "Fn::Equals": [
        {
          "Ref": "OpsMonitoring",
        },
        "Enabled",
      ],
    },
    "ScheduleASGsCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleASGs",
        },
        "Enabled",
      ],
    },
    "ScheduleDocDbCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleDocDb",
        },
        "Enabled",
      ],
    },
    "ScheduleEC2Condition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleEC2",
        },
        "Enabled",
      ],
    },
    "ScheduleLambdaAccountCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleLambdaAccount",
        },
        "Yes",
      ],
    },
    "ScheduleNeptuneCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleNeptune",
        },
        "Enabled",
      ],
    },
    "ScheduleRdsCondition": {
      "Fn::Equals": [
        {
          "Ref": "ScheduleRds",
        },
        "Enabled",
      ],
    },
    "SchedulerRolekmsAccessCondition93ED0C6C": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Ref": "KmsKeyArns",
                },
              ],
            },
            "",
          ],
        },
      ],
    },
    "SchedulingActiveCondition": {
      "Fn::Equals": [
        {
          "Ref": "SchedulingActive",
        },
        "Yes",
      ],
    },
    "TraceCondition": {
      "Fn::Equals": [
        {
          "Ref": "Trace",
        },
        "Yes",
      ],
    },
    "UsingAWSOrganizationsCondition": {
      "Fn::Equals": [
        {
          "Ref": "UsingAWSOrganizations",
        },
        "Yes",
      ],
    },
    "ddbDeletionProtectionCondition": {
      "Fn::Equals": [
        {
          "Ref": "ddbDeletionProtection",
        },
        "Enabled",
      ],
    },
  },
  "Mappings": {
    "AppRegistryForInstanceSchedulerSolution25A90F05": {
      "Data": {
        "AppRegistryApplicationName": "my-appreg-solution-name",
        "ApplicationType": "my-appreg-app-name",
        "ID": "my-solution-id",
        "SolutionName": "my-solution-name",
        "Version": "v9.9.9",
      },
    },
    "CronExpressionsForSchedulingIntervals": {
      "IntervalMinutesToCron": {
        "1": "cron(0/1 * * * ? *)",
        "10": "cron(0/10 * * * ? *)",
        "15": "cron(0/15 * * * ? *)",
        "2": "cron(0/2 * * * ? *)",
        "30": "cron(0/30 * * * ? *)",
        "5": "cron(0/5 * * * ? *)",
        "60": "cron(0 0/1 * * ? *)",
      },
    },
    "MetricsSchedulingIntervalToSeconds": {
      "MinutesToSeconds": {
        "1": "60",
        "10": "600",
        "15": "900",
        "2": "120",
        "30": "1800",
        "5": "300",
        "60": "3600",
      },
    },
    "Send": {
      "AnonymousUsage": {
        "Data": "Yes",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Scheduler (v9.9.9)",
          },
          "Parameters": [
            "TagName",
            "SchedulerFrequency",
            "DefaultTimezone",
            "SchedulingActive",
          ],
        },
        {
          "Label": {
            "default": "Services",
          },
          "Parameters": [
            "ScheduleEC2",
            "ScheduleRds",
            "EnableRdsClusterScheduling",
            "ScheduleNeptune",
            "ScheduleDocDb",
            "ScheduleASGs",
          ],
        },
        {
          "Label": {
            "default": "Tagging",
          },
          "Parameters": [
            "StartedTags",
            "StoppedTags",
          ],
        },
        {
          "Label": {
            "default": "Service-specific",
          },
          "Parameters": [
            "EnableSSMMaintenanceWindows",
            "KmsKeyArns",
            "CreateRdsSnapshot",
            "AsgScheduledTagKey",
            "AsgRulePrefix",
          ],
        },
        {
          "Label": {
            "default": "Account structure",
          },
          "Parameters": [
            "UsingAWSOrganizations",
            "Namespace",
            "Principals",
            "Regions",
            "ScheduleLambdaAccount",
          ],
        },
        {
          "Label": {
            "default": "Monitoring",
          },
          "Parameters": [
            "LogRetentionDays",
            "Trace",
            "OpsMonitoring",
          ],
        },
        {
          "Label": {
            "default": "Other",
          },
          "Parameters": [
            "MemorySize",
            "AsgMemorySize",
            "OrchestratorMemorySize",
            "ddbDeletionProtection",
          ],
        },
      ],
      "ParameterLabels": {
        "AsgMemorySize": {
          "default": "AsgHandler Memory size (MB)",
        },
        "AsgRulePrefix": {
          "default": "ASG action name prefix",
        },
        "AsgScheduledTagKey": {
          "default": "ASG scheduled tag key",
        },
        "CreateRdsSnapshot": {
          "default": "Create RDS instance snapshots on stop",
        },
        "DefaultTimezone": {
          "default": "Default time zone",
        },
        "EnableRdsClusterScheduling": {
          "default": "Enable RDS cluster scheduling",
        },
        "EnableSSMMaintenanceWindows": {
          "default": "Enable EC2 SSM Maintenance Windows",
        },
        "KmsKeyArns": {
          "default": "Kms Key Arns for EC2",
        },
        "LogRetentionDays": {
          "default": "Log retention period (days)",
        },
        "MemorySize": {
          "default": "SchedulingRequestHandler Memory size (MB)",
        },
        "Namespace": {
          "default": "Namespace",
        },
        "OpsMonitoring": {
          "default": "Operational Monitoring",
        },
        "OrchestratorMemorySize": {
          "default": "Orchestrator Memory size (MB)",
        },
        "Principals": {
          "default": "Organization ID/remote account IDs",
        },
        "Regions": {
          "default": "Region(s)",
        },
        "ScheduleASGs": {
          "default": "Enable AutoScaling Group scheduling",
        },
        "ScheduleDocDb": {
          "default": "Enable DocumentDB cluster scheduling",
        },
        "ScheduleEC2": {
          "default": "Enable EC2 scheduling",
        },
        "ScheduleLambdaAccount": {
          "default": "Enable hub account scheduling",
        },
        "ScheduleNeptune": {
          "default": "Enable Neptune cluster scheduling",
        },
        "ScheduleRds": {
          "default": "Enable RDS instance scheduling",
        },
        "SchedulerFrequency": {
          "default": "Scheduling interval (minutes)",
        },
        "SchedulingActive": {
          "default": "Enable scheduling",
        },
        "StartedTags": {
          "default": "Start tags",
        },
        "StoppedTags": {
          "default": "Stop tags",
        },
        "TagName": {
          "default": "Schedule tag key",
        },
        "Trace": {
          "default": "Enable CloudWatch debug Logs",
        },
        "UsingAWSOrganizations": {
          "default": "Use AWS Organizations",
        },
        "ddbDeletionProtection": {
          "default": "Protect DynamoDB Tables",
        },
      },
    },
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "id": "AwsSolutions-L1",
          "reason": "Python 3.11 is the newest available runtime. This finding is a false positive.",
        },
      ],
    },
  },
  "Outputs": {
    "AccountId": {
      "Description": "Hub Account ID - for use in corresponding spoke stack parameter",
      "Value": {
        "Ref": "AWS::AccountId",
      },
    },
    "ConfigurationTable": {
      "Description": "DynamoDB Configuration table ARN",
      "Value": {
        "Fn::GetAtt": [
          "ConfigTable",
          "Arn",
        ],
      },
    },
    "IssueSnsTopicArn": {
      "Description": "Notification SNS Topic ARN",
      "Value": {
        "Ref": "InstanceSchedulerSnsTopic",
      },
    },
    "SchedulerRoleArn": {
      "Description": "Scheduler role ARN",
      "Value": {
        "Fn::GetAtt": [
          "SchedulerRole59E73443",
          "Arn",
        ],
      },
    },
    "ServiceInstanceScheduleServiceToken": {
      "Description": "Custom resource provider ARN - use as ServiceToken property value for CloudFormation Schedules",
      "Value": {
        "Fn::GetAtt": [
          "Main",
          "Arn",
        ],
      },
    },
  },
  "Parameters": {
    "AsgMemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda function that schedules ASG resources. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "AsgRulePrefix": {
      "Default": "is-",
      "Description": "The prefix Instance Scheduler will use when naming Scheduled Scaling actions for AutoScaling Groups. Actions with this prefix will be added and removed by Instance Scheduler as needed.",
      "Type": "String",
    },
    "AsgScheduledTagKey": {
      "Default": "scheduled",
      "Description": "Key for the tag Instance Scheduler will add to scheduled AutoScaling Groups",
      "Type": "String",
    },
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "CreateRdsSnapshot": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Create snapshots before stopping RDS instances (not clusters).",
      "Type": "String",
    },
    "DefaultTimezone": {
      "AllowedValues": [
        "Africa/Abidjan",
        "Africa/Accra",
        "Africa/Addis_Ababa",
        "Africa/Algiers",
        "Africa/Asmara",
        "Africa/Bamako",
        "Africa/Bangui",
        "Africa/Banjul",
        "Africa/Bissau",
        "Africa/Blantyre",
        "Africa/Brazzaville",
        "Africa/Bujumbura",
        "Africa/Cairo",
        "Africa/Casablanca",
        "Africa/Ceuta",
        "Africa/Conakry",
        "Africa/Dakar",
        "Africa/Dar_es_Salaam",
        "Africa/Djibouti",
        "Africa/Douala",
        "Africa/El_Aaiun",
        "Africa/Freetown",
        "Africa/Gaborone",
        "Africa/Harare",
        "Africa/Johannesburg",
        "Africa/Juba",
        "Africa/Kampala",
        "Africa/Khartoum",
        "Africa/Kigali",
        "Africa/Kinshasa",
        "Africa/Lagos",
        "Africa/Libreville",
        "Africa/Lome",
        "Africa/Luanda",
        "Africa/Lubumbashi",
        "Africa/Lusaka",
        "Africa/Malabo",
        "Africa/Maputo",
        "Africa/Maseru",
        "Africa/Mbabane",
        "Africa/Mogadishu",
        "Africa/Monrovia",
        "Africa/Nairobi",
        "Africa/Ndjamena",
        "Africa/Niamey",
        "Africa/Nouakchott",
        "Africa/Ouagadougou",
        "Africa/Porto-Novo",
        "Africa/Sao_Tome",
        "Africa/Tripoli",
        "Africa/Tunis",
        "Africa/Windhoek",
        "America/Adak",
        "America/Anchorage",
        "America/Anguilla",
        "America/Antigua",
        "America/Araguaina",
        "America/Argentina/Buenos_Aires",
        "America/Argentina/Catamarca",
        "America/Argentina/Cordoba",
        "America/Argentina/Jujuy",
        "America/Argentina/La_Rioja",
        "America/Argentina/Mendoza",
        "America/Argentina/Rio_Gallegos",
        "America/Argentina/Salta",
        "America/Argentina/San_Juan",
        "America/Argentina/San_Luis",
        "America/Argentina/Tucuman",
        "America/Argentina/Ushuaia",
        "America/Aruba",
        "America/Asuncion",
        "America/Atikokan",
        "America/Bahia",
        "America/Bahia_Banderas",
        "America/Barbados",
        "America/Belem",
        "America/Belize",
        "America/Blanc-Sablon",
        "America/Boa_Vista",
        "America/Bogota",
        "America/Boise",
        "America/Cambridge_Bay",
        "America/Campo_Grande",
        "America/Cancun",
        "America/Caracas",
        "America/Cayenne",
        "America/Cayman",
        "America/Chicago",
        "America/Chihuahua",
        "America/Costa_Rica",
        "America/Creston",
        "America/Cuiaba",
        "America/Curacao",
        "America/Danmarkshavn",
        "America/Dawson",
        "America/Dawson_Creek",
        "America/Denver",
        "America/Detroit",
        "America/Dominica",
        "America/Edmonton",
        "America/Eirunepe",
        "America/El_Salvador",
        "America/Fortaleza",
        "America/Glace_Bay",
        "America/Godthab",
        "America/Goose_Bay",
        "America/Grand_Turk",
        "America/Grenada",
        "America/Guadeloupe",
        "America/Guatemala",
        "America/Guayaquil",
        "America/Guyana",
        "America/Halifax",
        "America/Havana",
        "America/Hermosillo",
        "America/Indiana/Indianapolis",
        "America/Indiana/Knox",
        "America/Indiana/Marengo",
        "America/Indiana/Petersburg",
        "America/Indiana/Tell_City",
        "America/Indiana/Vevay",
        "America/Indiana/Vincennes",
        "America/Indiana/Winamac",
        "America/Inuvik",
        "America/Iqaluit",
        "America/Jamaica",
        "America/Juneau",
        "America/Kentucky/Louisville",
        "America/Kentucky/Monticello",
        "America/Kralendijk",
        "America/La_Paz",
        "America/Lima",
        "America/Los_Angeles",
        "America/Lower_Princes",
        "America/Maceio",
        "America/Managua",
        "America/Manaus",
        "America/Marigot",
        "America/Martinique",
        "America/Matamoros",
        "America/Mazatlan",
        "America/Menominee",
        "America/Merida",
        "America/Metlakatla",
        "America/Mexico_City",
        "America/Miquelon",
        "America/Moncton",
        "America/Monterrey",
        "America/Montevideo",
        "America/Montreal",
        "America/Montserrat",
        "America/Nassau",
        "America/New_York",
        "America/Nipigon",
        "America/Nome",
        "America/Noronha",
        "America/North_Dakota/Beulah",
        "America/North_Dakota/Center",
        "America/North_Dakota/New_Salem",
        "America/Ojinaga",
        "America/Panama",
        "America/Pangnirtung",
        "America/Paramaribo",
        "America/Phoenix",
        "America/Port-au-Prince",
        "America/Port_of_Spain",
        "America/Porto_Velho",
        "America/Puerto_Rico",
        "America/Rainy_River",
        "America/Rankin_Inlet",
        "America/Recife",
        "America/Regina",
        "America/Resolute",
        "America/Rio_Branco",
        "America/Santa_Isabel",
        "America/Santarem",
        "America/Santiago",
        "America/Santo_Domingo",
        "America/Sao_Paulo",
        "America/Scoresbysund",
        "America/Sitka",
        "America/St_Barthelemy",
        "America/St_Johns",
        "America/St_Kitts",
        "America/St_Lucia",
        "America/St_Thomas",
        "America/St_Vincent",
        "America/Swift_Current",
        "America/Tegucigalpa",
        "America/Thule",
        "America/Thunder_Bay",
        "America/Tijuana",
        "America/Toronto",
        "America/Tortola",
        "America/Vancouver",
        "America/Whitehorse",
        "America/Winnipeg",
        "America/Yakutat",
        "America/Yellowknife",
        "Antarctica/Casey",
        "Antarctica/Davis",
        "Antarctica/DumontDUrville",
        "Antarctica/Macquarie",
        "Antarctica/Mawson",
        "Antarctica/McMurdo",
        "Antarctica/Palmer",
        "Antarctica/Rothera",
        "Antarctica/Syowa",
        "Antarctica/Vostok",
        "Arctic/Longyearbyen",
        "Asia/Aden",
        "Asia/Almaty",
        "Asia/Amman",
        "Asia/Anadyr",
        "Asia/Aqtau",
        "Asia/Aqtobe",
        "Asia/Ashgabat",
        "Asia/Baghdad",
        "Asia/Bahrain",
        "Asia/Baku",
        "Asia/Bangkok",
        "Asia/Beirut",
        "Asia/Bishkek",
        "Asia/Brunei",
        "Asia/Choibalsan",
        "Asia/Chongqing",
        "Asia/Colombo",
        "Asia/Damascus",
        "Asia/Dhaka",
        "Asia/Dili",
        "Asia/Dubai",
        "Asia/Dushanbe",
        "Asia/Gaza",
        "Asia/Harbin",
        "Asia/Hebron",
        "Asia/Ho_Chi_Minh",
        "Asia/Hong_Kong",
        "Asia/Hovd",
        "Asia/Irkutsk",
        "Asia/Jakarta",
        "Asia/Jayapura",
        "Asia/Jerusalem",
        "Asia/Kabul",
        "Asia/Kamchatka",
        "Asia/Karachi",
        "Asia/Kashgar",
        "Asia/Kathmandu",
        "Asia/Khandyga",
        "Asia/Kolkata",
        "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur",
        "Asia/Kuching",
        "Asia/Kuwait",
        "Asia/Macau",
        "Asia/Magadan",
        "Asia/Makassar",
        "Asia/Manila",
        "Asia/Muscat",
        "Asia/Nicosia",
        "Asia/Novokuznetsk",
        "Asia/Novosibirsk",
        "Asia/Omsk",
        "Asia/Oral",
        "Asia/Phnom_Penh",
        "Asia/Pontianak",
        "Asia/Pyongyang",
        "Asia/Qatar",
        "Asia/Qyzylorda",
        "Asia/Rangoon",
        "Asia/Riyadh",
        "Asia/Sakhalin",
        "Asia/Samarkand",
        "Asia/Seoul",
        "Asia/Shanghai",
        "Asia/Singapore",
        "Asia/Taipei",
        "Asia/Tashkent",
        "Asia/Tbilisi",
        "Asia/Tehran",
        "Asia/Thimphu",
        "Asia/Tokyo",
        "Asia/Ulaanbaatar",
        "Asia/Urumqi",
        "Asia/Ust-Nera",
        "Asia/Vientiane",
        "Asia/Vladivostok",
        "Asia/Yakutsk",
        "Asia/Yekaterinburg",
        "Asia/Yerevan",
        "Atlantic/Azores",
        "Atlantic/Bermuda",
        "Atlantic/Canary",
        "Atlantic/Cape_Verde",
        "Atlantic/Faroe",
        "Atlantic/Madeira",
        "Atlantic/Reykjavik",
        "Atlantic/South_Georgia",
        "Atlantic/St_Helena",
        "Atlantic/Stanley",
        "Australia/Adelaide",
        "Australia/Brisbane",
        "Australia/Broken_Hill",
        "Australia/Currie",
        "Australia/Darwin",
        "Australia/Eucla",
        "Australia/Hobart",
        "Australia/Lindeman",
        "Australia/Lord_Howe",
        "Australia/Melbourne",
        "Australia/Perth",
        "Australia/Sydney",
        "Canada/Atlantic",
        "Canada/Central",
        "Canada/Eastern",
        "Canada/Mountain",
        "Canada/Newfoundland",
        "Canada/Pacific",
        "Europe/Amsterdam",
        "Europe/Andorra",
        "Europe/Athens",
        "Europe/Belgrade",
        "Europe/Berlin",
        "Europe/Bratislava",
        "Europe/Brussels",
        "Europe/Bucharest",
        "Europe/Budapest",
        "Europe/Busingen",
        "Europe/Chisinau",
        "Europe/Copenhagen",
        "Europe/Dublin",
        "Europe/Gibraltar",
        "Europe/Guernsey",
        "Europe/Helsinki",
        "Europe/Isle_of_Man",
        "Europe/Istanbul",
        "Europe/Jersey",
        "Europe/Kaliningrad",
        "Europe/Kiev",
        "Europe/Lisbon",
        "Europe/Ljubljana",
        "Europe/London",
        "Europe/Luxembourg",
        "Europe/Madrid",
        "Europe/Malta",
        "Europe/Mariehamn",
        "Europe/Minsk",
        "Europe/Monaco",
        "Europe/Moscow",
        "Europe/Oslo",
        "Europe/Paris",
        "Europe/Podgorica",
        "Europe/Prague",
        "Europe/Riga",
        "Europe/Rome",
        "Europe/Samara",
        "Europe/San_Marino",
        "Europe/Sarajevo",
        "Europe/Simferopol",
        "Europe/Skopje",
        "Europe/Sofia",
        "Europe/Stockholm",
        "Europe/Tallinn",
        "Europe/Tirane",
        "Europe/Uzhgorod",
        "Europe/Vaduz",
        "Europe/Vatican",
        "Europe/Vienna",
        "Europe/Vilnius",
        "Europe/Volgograd",
        "Europe/Warsaw",
        "Europe/Zagreb",
        "Europe/Zaporozhye",
        "Europe/Zurich",
        "GMT",
        "Indian/Antananarivo",
        "Indian/Chagos",
        "Indian/Christmas",
        "Indian/Cocos",
        "Indian/Comoro",
        "Indian/Kerguelen",
        "Indian/Mahe",
        "Indian/Maldives",
        "Indian/Mauritius",
        "Indian/Mayotte",
        "Indian/Reunion",
        "Pacific/Apia",
        "Pacific/Auckland",
        "Pacific/Chatham",
        "Pacific/Chuuk",
        "Pacific/Easter",
        "Pacific/Efate",
        "Pacific/Enderbury",
        "Pacific/Fakaofo",
        "Pacific/Fiji",
        "Pacific/Funafuti",
        "Pacific/Galapagos",
        "Pacific/Gambier",
        "Pacific/Guadalcanal",
        "Pacific/Guam",
        "Pacific/Honolulu",
        "Pacific/Johnston",
        "Pacific/Kiritimati",
        "Pacific/Kosrae",
        "Pacific/Kwajalein",
        "Pacific/Majuro",
        "Pacific/Marquesas",
        "Pacific/Midway",
        "Pacific/Nauru",
        "Pacific/Niue",
        "Pacific/Norfolk",
        "Pacific/Noumea",
        "Pacific/Pago_Pago",
        "Pacific/Palau",
        "Pacific/Pitcairn",
        "Pacific/Pohnpei",
        "Pacific/Port_Moresby",
        "Pacific/Rarotonga",
        "Pacific/Saipan",
        "Pacific/Tahiti",
        "Pacific/Tarawa",
        "Pacific/Tongatapu",
        "Pacific/Wake",
        "Pacific/Wallis",
        "US/Alaska",
        "US/Arizona",
        "US/Central",
        "US/Eastern",
        "US/Hawaii",
        "US/Mountain",
        "US/Pacific",
        "UTC",
      ],
      "Default": "UTC",
      "Description": "Default IANA time zone identifier used by schedules that do not specify a time zone.",
      "Type": "String",
    },
    "EnableRdsClusterScheduling": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling RDS clusters (multi-AZ and Aurora).",
      "Type": "String",
    },
    "EnableSSMMaintenanceWindows": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Allow schedules to specify a maintenance window name. Instance Scheduler will ensure the instance is running during that maintenance window.",
      "Type": "String",
    },
    "KmsKeyArns": {
      "Default": "",
      "Description": "comma-separated list of kms arns to grant Instance Scheduler kms:CreateGrant permissions to provide the EC2  service with Decrypt permissions for encrypted EBS volumes. This allows the scheduler to start EC2 instances with attached encrypted EBS volumes. provide just (*) to give limited access to all kms keys, leave blank to disable. For details on the exact policy created, refer to security section of the implementation guide (https://aws.amazon.com/solutions/implementations/instance-scheduler-on-aws/)",
      "Type": "CommaDelimitedList",
    },
    "LogRetentionDays": {
      "AllowedValues": [
        "1",
        "3",
        "5",
        "7",
        "14",
        "30",
        "60",
        "90",
        "120",
        "150",
        "180",
        "365",
        "400",
        "545",
        "731",
        "1827",
        "3653",
      ],
      "Default": 30,
      "Description": "Retention period in days for logs.",
      "Type": "Number",
    },
    "MemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda function that schedules EC2 and RDS resources. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "Namespace": {
      "Default": "default",
      "Description": "Unique identifier per deployment. Cannot contain spaces.",
      "Type": "String",
    },
    "OpsMonitoring": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Deploy operational metrics and an Ops Monitoring Dashboard to Cloudwatch",
      "Type": "String",
    },
    "OrchestratorMemorySize": {
      "AllowedValues": [
        "128",
        "384",
        "512",
        "640",
        "768",
        "896",
        "1024",
        "1152",
        "1280",
        "1408",
        "1536",
      ],
      "Default": 128,
      "Description": "Memory size of the Lambda functions that coordinate multi-account, multi-region scheduling for the other scheduling lambdas. Increase if you are experiencing high memory usage or timeouts.",
      "Type": "Number",
    },
    "Principals": {
      "Default": "",
      "Description": "(Required) If using AWS Organizations, provide the Organization ID. Eg. o-xxxxyyy. Else, provide a comma-separated list of spoke account ids to schedule. Eg.: 1111111111, 2222222222 or {param: ssm-param-name}",
      "Type": "CommaDelimitedList",
    },
    "Regions": {
      "Default": "",
      "Description": "Comma-separated List of regions in which resources should be scheduled. Leave blank for current region only.",
      "Type": "CommaDelimitedList",
    },
    "ScheduleASGs": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling AutoScaling Groups",
      "Type": "String",
    },
    "ScheduleDocDb": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling DocumentDB clusters.",
      "Type": "String",
    },
    "ScheduleEC2": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling EC2 instances.",
      "Type": "String",
    },
    "ScheduleLambdaAccount": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Enable scheduling in this account.",
      "Type": "String",
    },
    "ScheduleNeptune": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling Neptune clusters.",
      "Type": "String",
    },
    "ScheduleRds": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable scheduling individual RDS instances (not clusters).",
      "Type": "String",
    },
    "SchedulerFrequency": {
      "AllowedValues": [
        "1",
        "2",
        "5",
        "10",
        "15",
        "30",
        "60",
      ],
      "Default": "5",
      "Description": "Interval in minutes between scheduler executions. For EC2 and RDS",
      "Type": "Number",
    },
    "SchedulingActive": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "Yes",
      "Description": "Set to "No" to disable scheduling for all services.",
      "Type": "String",
    },
    "StartedTags": {
      "Default": "InstanceScheduler-LastAction=Started By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
      "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on started instances. Leave blank to disable.",
      "Type": "String",
    },
    "StoppedTags": {
      "Default": "InstanceScheduler-LastAction=Stopped By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
      "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on stopped instances. Leave blank to disable.",
      "Type": "String",
    },
    "TagName": {
      "Default": "Schedule",
      "Description": "The tag key Instance Scheduler will read to determine the schedule for a resource. The value of the tag with this key on a resource specifies the name of the schedule.",
      "MaxLength": 127,
      "MinLength": 1,
      "Type": "String",
    },
    "Trace": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Enable debug-level logging in CloudWatch Logs.",
      "Type": "String",
    },
    "UsingAWSOrganizations": {
      "AllowedValues": [
        "Yes",
        "No",
      ],
      "Default": "No",
      "Description": "Deploy resources to enable automatic spoke stack registration using AWS Organizations.",
      "Type": "String",
    },
    "ddbDeletionProtection": {
      "AllowedValues": [
        "Enabled",
        "Disabled",
      ],
      "Default": "Enabled",
      "Description": "Enable deletion protection for DynamoDB tables used by the solution. This will cause the tables to be retained when deleting this stack. To delete the tables when deleting this stack, first disable this parameter.",
      "Type": "String",
    },
  },
  "Resources": {
    "ASGHandler0F6D6751": {
      "DependsOn": [
        "ASGRoleDefaultPolicy0DBFE29F",
        "ASGRole21C54AF6",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler for AutoScaling Groups version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULING_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Namespace",
                  },
                  "-ASG-Scheduling-Role",
                ],
              ],
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "asg",
            "RULE_PREFIX": {
              "Ref": "AsgRulePrefix",
            },
            "SCHEDULED_TAG_KEY": {
              "Ref": "AsgScheduledTagKey",
            },
            "SCHEDULE_TAG_KEY": {
              "Ref": "TagName",
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "AsgMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGRole21C54AF6",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGHandlerLogGroupA8EE11F3": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGHandler0F6D6751",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGPolicy3B6FAA4E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-ASG-Scheduling-Role",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGHandlerLogGroupA8EE11F3",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/",
                    {
                      "Ref": "Namespace",
                    },
                    "-ASG-Scheduling-Role",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGPolicy3B6FAA4E",
        "Roles": [
          {
            "Ref": "ASGRole21C54AF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGRole21C54AF6": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Explicit role name required for assumedBy arn principle in spoke stack",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-AsgRequestHandler-Role",
            ],
          ],
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGRoleDefaultPolicy0DBFE29F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGRoleDefaultPolicy0DBFE29F",
        "Roles": [
          {
            "Ref": "ASGRole21C54AF6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchLogGroup58E06A86": {
      "Condition": "ScheduleASGsCondition",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGSchedulerASGOrchestrator6629B72C",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGSchedulerASGOrchPolicyB5F2EC10": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGSchedulerASGOrchLogGroup58E06A86",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerASGOrchPolicyB5F2EC10",
        "Roles": [
          {
            "Ref": "ASGSchedulerASGOrchRole5B79F32B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchRole5B79F32B": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<ASGHandler0F6D6751.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the ASG scheduling request handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ASGHandler0F6D6751",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ASGHandler0F6D6751",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
        "Roles": [
          {
            "Ref": "ASGSchedulerASGOrchRole5B79F32B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerASGOrchRule510DB4D0": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "Description": "Instance Scheduler - Rule to trigger scheduling for AutoScaling Groups version v9.9.9",
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ASGSchedulerASGOrchestrator6629B72C",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{}",
            "RetryPolicy": {
              "MaximumRetryAttempts": 5,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ASGSchedulerASGOrchRuleAllowEventRulestackASGSchedulerASGOrchestrator9436C96D61301E75": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchestrator6629B72C",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchRule510DB4D0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ASGSchedulerASGOrchestrator6629B72C": {
      "Condition": "ScheduleASGsCondition",
      "DependsOn": [
        "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
        "ASGSchedulerASGOrchRole5B79F32B",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler orchestrator for AutoScaling Groups version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULER_NAME": {
              "Ref": "ASGHandler0F6D6751",
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "asg_orch",
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGSchedulerASGOrchRole5B79F32B",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Required permissions to describe AutoScaling Groups",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:autoscaling:*:<AWS::AccountId>:autoScalingGroup:*:autoScalingGroupName/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Required permissions to modify scheduled scaling actions on AutoScaling Groups",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "DescribeAutoScalingGroups and autoscaling:DescribeScheduledActions actions require wildcard permissions",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:BatchPutScheduledUpdateGroupAction",
                "autoscaling:BatchDeleteScheduledAction",
                "autoscaling:CreateOrUpdateTags",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeScheduledActions",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1",
        "Roles": [
          {
            "Ref": "ASGSchedulerAsgSchedulingRoleC184E725",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerAsgSchedulingRoleC184E725": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "The role name is defined to allow cross account access from the hub account.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "ASGRole21C54AF6",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-ASG-Scheduling-Role",
            ],
          ],
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerScheduleUpdateHandlerCC8A8D00": {
      "Condition": "ScheduleASGsCondition",
      "DependsOn": [
        "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
        "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Instance Scheduler handler for updates to schedules version v9.9.9",
        "Environment": {
          "Variables": {
            "ASG_SCHEDULER_NAME": {
              "Ref": "ASGHandler0F6D6751",
            },
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "POWERTOOLS_LOG_LEVEL": {
              "Fn::If": [
                "TraceCondition",
                "DEBUG",
                "INFO",
              ],
            },
            "POWERTOOLS_SERVICE_NAME": "sch_upd",
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "lambda_handler",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGSchedulerScheduleUpdateHandlerDynamoDBEventSourcestackConfigTableA8EC614E569DEAA0": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ConfigTable",
            "StreamArn",
          ],
        },
        "FilterCriteria": {
          "Filters": [
            {
              "Pattern": "{"dynamodb":{"Keys":{"type":{"S":["schedule","period"]}}}}",
            },
            {
              "Pattern": "{"eventName":["INSERT","MODIFY"]}",
            },
          ],
        },
        "FunctionName": {
          "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00",
        },
        "MaximumBatchingWindowInSeconds": 60,
        "StartingPosition": "LATEST",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D": {
      "Condition": "ScheduleASGsCondition",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2",
        "Roles": [
          {
            "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGSchedulerScheduleUpdateHandlerRole25C919AA": {
      "Condition": "ScheduleASGsCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80": {
      "Condition": "ScheduleASGsCondition",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<ASGHandler0F6D6751.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the ASG scheduling request handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ConfigTable",
                  "StreamArn",
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ASGHandler0F6D6751",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ASGHandler0F6D6751",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
        "Roles": [
          {
            "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AppRegistry968496A3": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Service Catalog application to track and manage all your resources for the solution ",
              {
                "Fn::FindInMap": [
                  "AppRegistryForInstanceSchedulerSolution25A90F05",
                  "Data",
                  "SolutionName",
                ],
              },
            ],
          ],
        },
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::FindInMap": [
                  "AppRegistryForInstanceSchedulerSolution25A90F05",
                  "Data",
                  "AppRegistryApplicationName",
                ],
              },
              {
                "Ref": "AWS::Region",
              },
              {
                "Ref": "AWS::AccountId",
              },
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "Tags": {
          "Solutions:ApplicationType": {
            "Fn::FindInMap": [
              "AppRegistryForInstanceSchedulerSolution25A90F05",
              "Data",
              "ApplicationType",
            ],
          },
          "Solutions:SolutionID": {
            "Fn::FindInMap": [
              "AppRegistryForInstanceSchedulerSolution25A90F05",
              "Data",
              "ID",
            ],
          },
          "Solutions:SolutionName": {
            "Fn::FindInMap": [
              "AppRegistryForInstanceSchedulerSolution25A90F05",
              "Data",
              "SolutionName",
            ],
          },
          "Solutions:SolutionVersion": {
            "Fn::FindInMap": [
              "AppRegistryForInstanceSchedulerSolution25A90F05",
              "Data",
              "Version",
            ],
          },
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
    },
    "ConfigTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "type",
            "AttributeType": "S",
          },
          {
            "AttributeName": "name",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "type",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "name",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "StreamSpecification": {
          "StreamViewType": "KEYS_ONLY",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "InstanceSchedulerEncryptionKey": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "Description": "Key for SNS",
        "EnableKeyRotation": true,
        "Enabled": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "InstanceSchedulerEncryptionKeyAlias": {
      "Properties": {
        "AliasName": {
          "Fn::Join": [
            "",
            [
              "alias/",
              {
                "Ref": "AWS::StackName",
              },
              "-instance-scheduler-encryption-key",
            ],
          ],
        },
        "TargetKeyId": {
          "Fn::GetAtt": [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "InstanceSchedulerSnsTopic": {
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "InstanceSchedulerEncryptionKey",
            "Arn",
          ],
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "Main": {
      "DependsOn": [
        "MainLambdaRoleDefaultPolicy5347C905",
        "MainLambdaRole500DC55A",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "EC2 and RDS instance scheduler, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_AWS_ORGANIZATIONS": {
              "Fn::If": [
                "UsingAWSOrganizationsCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "TRACE": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-InstanceSchedulerMain",
            ],
          ],
        },
        "Handler": "lambda_handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "MainLambdaRole500DC55A",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MainLambdaRole500DC55A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MainLambdaRoleDefaultPolicy5347C905": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use the solution's custom log group",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/<AWS::StackName>-InstanceSchedulerMain:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to modify own log group retention policy",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:PutRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "AWS::StackName",
                    },
                    "-InstanceSchedulerMain:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MainLambdaRoleDefaultPolicy5347C905",
        "Roles": [
          {
            "Ref": "MainLambdaRole500DC55A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MaintenanceWindowTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
          {
            "AttributeName": "name-id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "account-region",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "name-id",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "MetricsGeneratorRole83735CC4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetricsGeneratorRoleDefaultPolicy19F5F29A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetricsGeneratorRoleDefaultPolicy19F5F29A",
        "Roles": [
          {
            "Ref": "MetricsGeneratorRole83735CC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetricsUuidGenerator172A04DB": {
      "DependsOn": [
        "MetricsGeneratorRoleDefaultPolicy19F5F29A",
        "MetricsGeneratorRole83735CC4",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is a custom resource. Concurrent calls are very limited.",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Custom Resource Provider used to generate unique UUIDs for solution deployments",
        "Environment": {
          "Variables": {
            "STACK_ID": {
              "Ref": "AWS::StackId",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
            "UUID_KEY": "/Solutions/my-solution-name/UUID/",
          },
        },
        "Handler": "handle_metrics_uuid_request",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "MetricsGeneratorRole83735CC4",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MetricsUuidHandlerLogGroupF41CCF90": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "MetricsUuidGenerator172A04DB",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MetricsUuidPermissionsPolicyD0672406": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ssm:<AWS::Region>:<AWS::AccountId>:parameter/Solutions/instance-scheduler-on-aws/UUID/*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "backwards compatibility (<=1.5.3) -- ability to read metrics UUID from ssm parameter",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "MetricsUuidHandlerLogGroupF41CCF90",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/Solutions/my-solution-name/UUID/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetricsUuidPermissionsPolicyD0672406",
        "Roles": [
          {
            "Ref": "MetricsGeneratorRole83735CC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetricsUuidProvider": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MetricsUuidPermissionsPolicyD0672406",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "MetricsUuidGenerator172A04DB",
            "Arn",
          ],
        },
      },
      "Type": "Custom::MetricsUuid",
      "UpdateReplacePolicy": "Delete",
    },
    "OperationalInsightsDashboardE3C49DFC": {
      "Condition": "OpsMonitoringCondition",
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{"start":"-P7D","periodOverride":"inherit","widgets":[{"type":"text","width":24,"height":1,"x":0,"y":0,"properties":{"markdown":"# EC2"}},{"type":"metric","width":6,"height":6,"x":0,"y":1,"properties":{"view":"singleValue","title":"Total EC2 Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"EC2 Instances","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "))"}]],"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":6,"y":1,"properties":{"view":"pie","title":"EC2 Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${LAST}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{},"legend":{"position":"right"},"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":12,"y":1,"properties":{"view":"singleValue","title":"Total EC2 Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"Hours Saved","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")) * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":6,"height":6,"x":18,"y":1,"properties":{"view":"pie","title":"EC2 Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${SUM}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ") * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"yAxis":{},"legend":{"position":"right"},"setPeriodToTimeRange":true,"stat":"Sum"}},{"type":"metric","width":12,"height":6,"x":0,"y":7,"properties":{"view":"timeSeries","title":"Controlled EC2 Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":7,"properties":{"view":"timeSeries","title":"Running EC2 Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":0,"y":13,"properties":{"view":"timeSeries","title":"Controlled EC2 Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":13,"properties":{"view":"timeSeries","title":"Running EC2 Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"ec2\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running EC2 Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"text","width":24,"height":1,"x":0,"y":19,"properties":{"markdown":"# RDS"}},{"type":"metric","width":6,"height":6,"x":0,"y":20,"properties":{"view":"singleValue","title":"Total RDS Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"RDS Instances","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=ManagedInstances', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "))"}]],"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":6,"y":20,"properties":{"view":"pie","title":"RDS Instances Controlled","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${LAST}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{},"legend":{"position":"right"},"period":",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              "}},{"type":"metric","width":6,"height":6,"x":12,"y":20,"properties":{"view":"singleValue","title":"Total RDS Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"Hours Saved","expression":"SUM(SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")) * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":6,"height":6,"x":18,"y":20,"properties":{"view":"pie","title":"RDS Hours Saved","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"[\${SUM}]","expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"StoppedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ") * ",
              {
                "Ref": "SchedulerFrequency",
              },
              " / 60","period":2592000}]],"yAxis":{},"legend":{"position":"right"},"setPeriodToTimeRange":true,"stat":"Sum"}},{"type":"metric","width":12,"height":6,"x":0,"y":26,"properties":{"view":"timeSeries","title":"Controlled RDS Instances by Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} \\"Service\\"=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Controlled RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":26,"properties":{"view":"timeSeries","title":"Running RDS Instances By Type","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,InstanceType,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":0,"y":32,"properties":{"view":"timeSeries","title":"Controlled RDS Instances By Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"ManagedInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Controlled RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"metric","width":12,"height":6,"x":12,"y":32,"properties":{"view":"timeSeries","title":"Running RDS Instances by Schedule","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"expression":"SEARCH('{\\"",
              {
                "Ref": "AWS::StackName",
              },
              ":InstanceScheduler\\",Service,Schedule,SchedulingInterval} Service=\\"rds\\" \\"SchedulingInterval\\"=\\"",
              {
                "Ref": "SchedulerFrequency",
              },
              "\\" MetricName=\\"RunningInstances\\"', 'Sum', ",
              {
                "Fn::FindInMap": [
                  "MetricsSchedulingIntervalToSeconds",
                  "MinutesToSeconds",
                  {
                    "Ref": "SchedulerFrequency",
                  },
                ],
              },
              ")"}]],"yAxis":{"left":{"label":"Running RDS Instances","showUnits":false,"min":0}},"legend":{"position":"bottom"}}},{"type":"text","width":24,"height":1,"x":0,"y":38,"properties":{"markdown":"# Lambda"}},{"type":"metric","width":12,"height":6,"x":0,"y":39,"properties":{"view":"timeSeries","title":"Lambda Duration (P99)","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
              "",{"label":"Orchestrator"}],["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
              "",{"label":"SchedulingRequestHandler"}],["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "ASGHandler0F6D6751",
              },
              "",{"label":"AsgHandler"}]],"annotations":{"horizontal":[{"value":300000,"fill":"below","color":"#d62728","label":"Timeout Threshold (5 minutes)","yAxis":"left"},{"value":240000,"fill":"below","color":"#ff7f0e","yAxis":"left"},{"value":180000,"fill":"below","color":"#2ca02c","yAxis":"left"}]},"yAxis":{"left":{"label":"duration (ms)","showUnits":false}},"legend":{"position":"bottom"},"liveData":true,"period":1800,"stat":"p99"}},{"type":"metric","width":12,"height":6,"x":12,"y":39,"properties":{"view":"timeSeries","title":"Lambda Errors","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
              "",{"label":"Orchestrator"}],["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
              "",{"label":"SchedulingRequestHandler"}],["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "ASGHandler0F6D6751",
              },
              "",{"label":"AsgHandler"}]],"yAxis":{"left":{"label":"Errors","showUnits":false}},"legend":{"position":"bottom"},"liveData":true,"period":1800,"stat":"Sum"}}]}",
            ],
          ],
        },
        "DashboardName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-",
              {
                "Ref": "Namespace",
              },
              "-Operational-Insights-Dashboard",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "SchedulerConfigHelper": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SchedulerLogGroup",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "Main",
            "Arn",
          ],
        },
        "log_retention_days": {
          "Ref": "LogRetentionDays",
        },
        "remote_account_ids": {
          "Ref": "Principals",
        },
        "timeout": 120,
      },
      "Type": "Custom::ServiceSetup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerEventRuleAllowEventRulestackSchedulingOrchestrator54551718E1E4729D": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SchedulingOrchestratorBB4C4C5A",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "SchedulerEventRuleDD9A6B32",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SchedulerEventRuleDD9A6B32": {
      "Properties": {
        "Description": "Instance Scheduler - Rule to trigger instance for scheduler function version v9.9.9",
        "ScheduleExpression": {
          "Fn::FindInMap": [
            "CronExpressionsForSchedulingIntervals",
            "IntervalMinutesToCron",
            {
              "Ref": "SchedulerFrequency",
            },
          ],
        },
        "State": {
          "Fn::If": [
            "SchedulingActiveCondition",
            "ENABLED",
            "DISABLED",
          ],
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SchedulingOrchestratorBB4C4C5A",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"scheduled_action":"run_orchestrator"}",
            "RetryPolicy": {
              "MaximumRetryAttempts": 5,
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SchedulerLogGroup": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatch log groups only have transactional data from the Lambda function, this template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group.",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName",
              },
              "-logs",
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "SchedulerRole59E73443": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "The role name is defined to allow cross account access from the hub account.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "schedulingRequestHandlerRoleD87803EB",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-Scheduler-Role",
            ],
          ],
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SchedulerRoleKmsPermissionsBF1B9F02": {
      "Condition": "SchedulerRolekmsAccessCondition93ED0C6C",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Specific kms keys are unknown until runtime, for security, access is instead restricted to only granting decryption permissions to the ec2 service for encrypted EBS volumes",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:CreateGrant",
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": true,
                },
                "ForAllValues:StringEquals": {
                  "kms:EncryptionContextKeys": [
                    "aws:ebs:id",
                  ],
                  "kms:GrantOperations": [
                    "Decrypt",
                  ],
                },
                "Null": {
                  "kms:EncryptionContextKeys": false,
                  "kms:GrantOperations": false,
                },
                "StringLike": {
                  "kms:ViaService": "ec2.*.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "KmsKeyArns",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRoleKmsPermissionsBF1B9F02",
        "Roles": [
          {
            "Ref": "SchedulerRole59E73443",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulerRoleSchedulingPermissions2C1B256A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:db:*",
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:cluster:*",
                "Resource::arn:<AWS::Partition>:ec2:*:<AWS::AccountId>:instance/*",
                "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:snapshot:*",
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required scheduling permissions",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "required scheduling permissions",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeInstances",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "ec2:ModifyInstanceAttribute",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:ec2:*:\${AWS::AccountId}:instance/*",
              },
            },
            {
              "Action": "ssm:DescribeMaintenanceWindows",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "rds:DescribeDBClusters",
                "rds:DescribeDBInstances",
                "tag:GetResources",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "rds:DeleteDBSnapshot",
                "rds:DescribeDBSnapshots",
                "rds:StopDBInstance",
                "rds:CreateDBSnapshot",
                "rds:AddTagsToResource",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:snapshot:*",
              },
            },
            {
              "Action": [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:StartDBInstance",
                "rds:StopDBInstance",
                "rds:CreateDBSnapshot",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:db:*",
              },
            },
            {
              "Action": [
                "rds:AddTagsToResource",
                "rds:RemoveTagsFromResource",
                "rds:StartDBCluster",
                "rds:StopDBCluster",
                "rds:CreateDBClusterSnapshot",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:\${AWS::Partition}:rds:*:\${AWS::AccountId}:cluster:*",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulerRoleSchedulingPermissions2C1B256A",
        "Roles": [
          {
            "Ref": "SchedulerRole59E73443",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulingOrchestratorBB4C4C5A": {
      "DependsOn": [
        "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
        "SchedulingOrchestratorRoleAD0FF7B1",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is invoked by a scheduled rule, it does not run concurrently",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "scheduling orchestrator for Instance Scheduler on AWS, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_ASG_SERVICE": {
              "Fn::If": [
                "ScheduleASGsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_AWS_ORGANIZATIONS": {
              "Fn::If": [
                "UsingAWSOrganizationsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DOCDB_SERVICE": {
              "Fn::If": [
                "ScheduleDocDbCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SERVICE": {
              "Fn::If": [
                "ScheduleEC2Condition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
              "Fn::If": [
                "EnableSSMMaintenanceWindowsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_NEPTUNE_SERVICE": {
              "Fn::If": [
                "ScheduleNeptuneCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_CLUSTERS": {
              "Fn::If": [
                "EnableRdsClusterSchedulingCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SERVICE": {
              "Fn::If": [
                "ScheduleRdsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SNAPSHOTS": {
              "Fn::If": [
                "CreateRdsSnapshotCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_SCHEDULE_HUB_ACCOUNT": {
              "Fn::If": [
                "ScheduleLambdaAccountCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "OPS_DASHBOARD_ENABLED": {
              "Fn::If": [
                "OpsMonitoringCondition",
                "True",
                "False",
              ],
            },
            "SCHEDULE_REGIONS": {
              "Fn::Join": [
                ",",
                {
                  "Ref": "Regions",
                },
              ],
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SCHEDULING_REQUEST_HANDLER_NAME": {
              "Ref": "schedulingRequestHandlerLambdaC395DC9E",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "START_TAGS": {
              "Ref": "StartedTags",
            },
            "STOP_TAGS": {
              "Ref": "StoppedTags",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "handle_orchestration_request",
        "MemorySize": {
          "Ref": "OrchestratorMemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "SchedulingOrchestratorRoleAD0FF7B1",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SchedulingOrchestratorLogGroup24735009": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "SchedulingOrchestratorBB4C4C5A",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SchedulingOrchestratorPermissionsPolicyC2148A26": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:ssm:*:<AWS::AccountId>:parameter/*",
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Orchestrator requires access to SSM parameters for translating {param: my-param} values to configured account ids",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for ssm:DescribeParameters",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulingOrchestratorLogGroup24735009",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ssm:DescribeParameters",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:*:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulingOrchestratorPermissionsPolicyC2148A26",
        "Roles": [
          {
            "Ref": "SchedulingOrchestratorRoleAD0FF7B1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SchedulingOrchestratorRoleAD0FF7B1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<schedulingRequestHandlerLambdaC395DC9E.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permission to invoke request handler lambda",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "schedulingRequestHandlerLambdaC395DC9E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "schedulingRequestHandlerLambdaC395DC9E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
        "Roles": [
          {
            "Ref": "SchedulingOrchestratorRoleAD0FF7B1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeDeregistrationRunbookFF4A7B49": {
      "Properties": {
        "Content": {
          "assumeRole": {
            "Fn::GetAtt": [
              "SpokeDeregistrationRunbookRole0A1D0232",
              "Arn",
            ],
          },
          "description": "Deregister a spoke account from Instance Scheduler on AWS on demand",
          "mainSteps": [
            {
              "action": "aws:invokeLambdaFunction",
              "description": "Invokes the Instance Scheduler on AWS spoke registration lambda to deregister a given AWS Account ID",
              "inputs": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SpokeRegistrationHandler923F17AC",
                    "Arn",
                  ],
                },
                "InputPayload": {
                  "account": "{{ AccountId }}",
                  "operation": "Deregister",
                },
                "InvocationType": "RequestResponse",
              },
              "name": "InvokeSpokeRegistrationLambda",
            },
          ],
          "parameters": {
            "AccountId": {
              "allowedPattern": "^\\d{12}$",
              "description": "Spoke Account ID used for registration",
              "type": "String",
            },
          },
          "schemaVersion": "0.3",
        },
        "DocumentFormat": "YAML",
        "DocumentType": "Automation",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
          {
            "Key": "CdkGenerated",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::SSM::Document",
    },
    "SpokeDeregistrationRunbookRole0A1D0232": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ssm.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Role assumed by SSM Automation to call the spoke registration lambda",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "permissions to invoke all versions of the spoke registration lambda",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SpokeRegistrationHandler923F17AC",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SpokeRegistrationHandler923F17AC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D",
        "Roles": [
          {
            "Ref": "SpokeDeregistrationRunbookRole0A1D0232",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeRegistrationHandler923F17AC": {
      "DependsOn": [
        "SpokeRegistrationRoleDefaultPolicy7A7A6954",
        "SpokeRegistrationRole0E2E4D3E",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Lambda function is invoke by new account registration/deregistration events and is not likely to have much concurrency",
            },
            {
              "id": "F13",
              "reason": "This lambda scopes invoke permissions to members of the same AWS organization. This is the narrowest possible scope that still allows new spoke accounts to register themselves with the hub after being deployed",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "spoke account registration handler, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              "InstanceScheduler-",
              {
                "Ref": "Namespace",
              },
              "-SpokeRegistration",
            ],
          ],
        },
        "Handler": "handle_spoke_registration_event",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SpokeRegistrationRole0E2E4D3E",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 60,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SpokeRegistrationLambdaCrossAccountPermission": {
      "Condition": "UsingAWSOrganizationsCondition",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F13",
              "reason": "Lambda permission policy requires principal wildcard for spoke accounts to self register by invoking this function.This is acceptable as we are narrowing the authorized accounts to only those contained within the org via principalOrgId",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "SpokeRegistrationHandler923F17AC",
        },
        "Principal": "*",
        "PrincipalOrgID": {
          "Fn::Select": [
            0,
            {
              "Ref": "Principals",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SpokeRegistrationPolicy600671FC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:*",
                "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:log-stream:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Wildcard required for creating and writing to log group and stream",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/InstanceScheduler-",
                    {
                      "Ref": "Namespace",
                    },
                    "-SpokeRegistration:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:/aws/lambda/InstanceScheduler-",
                    {
                      "Ref": "Namespace",
                    },
                    "-SpokeRegistration:log-stream:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeRegistrationPolicy600671FC",
        "Roles": [
          {
            "Ref": "SpokeRegistrationRole0E2E4D3E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SpokeRegistrationRole0E2E4D3E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SpokeRegistrationRoleDefaultPolicy7A7A6954": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SpokeRegistrationRoleDefaultPolicy7A7A6954",
        "Roles": [
          {
            "Ref": "SpokeRegistrationRole0E2E4D3E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StateTable": {
      "DeletionPolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "service",
            "AttributeType": "S",
          },
          {
            "AttributeName": "account-region",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "DeletionProtectionEnabled": {
          "Fn::If": [
            "ddbDeletionProtectionCondition",
            "True",
            "False",
          ],
        },
        "KeySchema": [
          {
            "AttributeName": "service",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "account-region",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "KMSMasterKeyId": {
            "Fn::GetAtt": [
              "InstanceSchedulerEncryptionKey",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": {
        "Fn::If": [
          "ddbDeletionProtectionCondition",
          "Retain",
          "Delete",
        ],
      },
    },
    "schedulingRequestHandlerLambdaC395DC9E": {
      "DependsOn": [
        "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
        "schedulingRequestHandlerRoleD87803EB",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC.",
            },
            {
              "id": "W58",
              "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles.",
            },
            {
              "id": "W92",
              "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda",
            },
          ],
        },
      },
      "Properties": {
        "Code": "Omitted to remove snapshot dependency on code hash",
        "Description": "Handles scheduling requests for Instance Scheduler on AWS, version v9.9.9",
        "Environment": {
          "Variables": {
            "CONFIG_TABLE": {
              "Ref": "ConfigTable",
            },
            "DEFAULT_TIMEZONE": {
              "Ref": "DefaultTimezone",
            },
            "ENABLE_DEBUG_LOGS": {
              "Fn::If": [
                "TraceCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_DOCDB_SERVICE": {
              "Fn::If": [
                "ScheduleDocDbCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
              "Fn::If": [
                "EnableSSMMaintenanceWindowsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_NEPTUNE_SERVICE": {
              "Fn::If": [
                "ScheduleNeptuneCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_OPS_MONITORING": {
              "Fn::If": [
                "OpsMonitoringCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_CLUSTERS": {
              "Fn::If": [
                "EnableRdsClusterSchedulingCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SERVICE": {
              "Fn::If": [
                "ScheduleRdsCondition",
                "True",
                "False",
              ],
            },
            "ENABLE_RDS_SNAPSHOTS": {
              "Fn::If": [
                "CreateRdsSnapshotCondition",
                "True",
                "False",
              ],
            },
            "ISSUES_TOPIC_ARN": {
              "Ref": "InstanceSchedulerSnsTopic",
            },
            "LOG_GROUP": {
              "Ref": "SchedulerLogGroup",
            },
            "MAINT_WINDOW_TABLE": {
              "Ref": "MaintenanceWindowTable",
            },
            "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
            "METRICS_UUID": {
              "Fn::GetAtt": [
                "MetricsUuidProvider",
                "Uuid",
              ],
            },
            "SCHEDULER_ROLE_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Namespace",
                  },
                  "-Scheduler-Role",
                ],
              ],
            },
            "SCHEDULE_TAG_KEY": {
              "Ref": "TagName",
            },
            "SCHEDULING_INTERVAL_MINUTES": {
              "Ref": "SchedulerFrequency",
            },
            "SEND_METRICS": {
              "Fn::If": [
                "AnonymizedMetricsEnabled",
                "True",
                "False",
              ],
            },
            "SOLUTION_ID": "my-solution-id",
            "SOLUTION_VERSION": "v9.9.9",
            "STACK_NAME": {
              "Ref": "AWS::StackName",
            },
            "START_TAGS": {
              "Ref": "StartedTags",
            },
            "STATE_TABLE": {
              "Ref": "StateTable",
            },
            "STOP_TAGS": {
              "Ref": "StoppedTags",
            },
            "USER_AGENT_EXTRA": "AwsSolution/my-solution-id/v9.9.9",
          },
        },
        "Handler": "handle_scheduling_request",
        "MemorySize": {
          "Ref": "MemorySize",
        },
        "Role": {
          "Fn::GetAtt": [
            "schedulingRequestHandlerRoleD87803EB",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "schedulingRequestHandlerLogGroup92A14530": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group",
            },
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "schedulingRequestHandlerLambdaC395DC9E",
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Ref": "LogRetentionDays",
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "schedulingRequestHandlerPolicy1BE05FC4": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Action::kms:GenerateDataKey*",
                "Action::kms:ReEncrypt*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Permission to use solution CMK with dynamo/sns",
            },
            {
              "applies_to": [
                "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-Scheduler-Role",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
            },
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Ability to publish custom metrics to cloudwatch",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "cloudwatch:PutMetricData action requires wildcard",
            },
            {
              "id": "W76",
              "reason": "Acknowledged IAM policy document SPCM > 25",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "schedulingRequestHandlerLogGroup92A14530",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ConfigTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StateTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "MaintenanceWindowTable",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "InstanceSchedulerSnsTopic",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "InstanceSchedulerEncryptionKey",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SchedulerLogGroup",
                  "Arn",
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/",
                    {
                      "Ref": "Namespace",
                    },
                    "-Scheduler-Role",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName",
                        },
                        ":InstanceScheduler",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "schedulingRequestHandlerPolicy1BE05FC4",
        "Roles": [
          {
            "Ref": "schedulingRequestHandlerRoleD87803EB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "schedulingRequestHandlerRoleD87803EB": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W28",
              "reason": "Explicit role name required for assumedBy arn principle in spoke stack",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Namespace",
              },
              "-SchedulingRequestHandler-Role",
            ],
          ],
        },
        "Tags": [
          {
            "Key": "awsApplication",
            "Value": {
              "Fn::GetAtt": [
                "AppRegistry968496A3",
                "ApplicationTagValue",
              ],
            },
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "schedulingRequestHandlerRoleDefaultPolicy938ADC4A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                "Resource::*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "required for xray",
            },
            {
              "applies_to": [
                "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*",
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "ability to call spoke-registration handler",
            },
          ],
        },
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Wildcard required for xray",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
        "Roles": [
          {
            "Ref": "schedulingRequestHandlerRoleD87803EB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
